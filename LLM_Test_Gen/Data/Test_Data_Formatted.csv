"FQN","Signature","Jimple Code Representation","Generated Code","Code After Formatting","Saved Path"
"org.apache.commons.lang3.text.WordUtils.uncapitalize(java.lang.String)","java.lang.String uncapitalize(java.lang.String)","{
    java.lang.String str;
    unknown $stack1;


    str := @parameter0: java.lang.String;
    $stack1 = staticinvoke <org.apache.commons.lang3.text.WordUtils: java.lang.String uncapitalize(java.lang.String,char[])>(str, null);

    return $stack1;
}
","```java
package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the WordUtils class's uncapitalize method.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class WordUtilsTest {

    private WordUtils wordUtils;

    @BeforeEach
    void setUp() {
        wordUtils = new WordUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test uncapitalize a string with all uppercase letters"")
    void testUncapitalizeAllUppercase() {
        assertEquals(""hello"", wordUtils.uncapitalize(""HELLO""), ""Should uncapitalize all uppercase letters"");
    }

    @Test
    @DisplayName(""Test uncapitalize a string with mixed uppercase and lowercase letters"")
    void testUncapitalizeMixedCase() {
        assertEquals(""java programming"", wordUtils.uncapitalize(""Java Programming""), ""Should uncapitalize mixed case letters"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test uncapitalize a single character string"")
    void testUncapitalizeSingleCharacter() {
        assertEquals(""h"", wordUtils.uncapitalize(""H""), ""Single uppercase character should become lowercase"");
        assertEquals(""h"", wordUtils.uncapitalize(""h""), ""Single lowercase character should remain lowercase"");
    }

    @Test
    @DisplayName(""Test uncapitalize an already uncapitalized string"")
    void testUncapitalizeAlreadyUncapitalized() {
        assertEquals(""already uncapitalized"", wordUtils.uncapitalize(""already uncapitalized""), ""Should remain the same"");
    }

    // EMPTY AND NULL CASES

    @Test
    @DisplayName(""Test uncapitalize an empty string"")
    void testUncapitalizeEmptyString() {
        assertEquals("""", wordUtils.uncapitalize(""""), ""Empty string should remain empty"");
    }

    @Test
    @DisplayName(""Test uncapitalize a null string"")
    void testUncapitalizeNullString() {
        assertNull(wordUtils.uncapitalize(null), ""Null string should remain null"");
    }

    // SPECIAL CHARACTERS CASES

    @Test
    @DisplayName(""Test uncapitalize a string with special characters"")
    void testUncapitalizeSpecialCharacters() {
        assertEquals(""!hello world"", wordUtils.uncapitalize(""!Hello World""), ""Special characters should remain unchanged"");
        assertEquals(""123abc"", wordUtils.uncapitalize(""123Abc""), ""Numbers should remain unchanged"");
    }

    // MIXED CONTENT CASES

    @Test
    @DisplayName(""Test uncapitalize string with spaces and punctuation"")
    void testUncapitalizeSpacesAndPunctuation() {
        assertEquals(""hello, world!"", wordUtils.uncapitalize(""Hello, World!""), ""Should handle spaces and punctuation correctly"");
    }

    @Test
    @DisplayName(""Test uncapitalize with only punctuation"")
    void testUncapitalizeOnlyPunctuation() {
        assertEquals(""?!.,"", wordUtils.uncapitalize(""?!.,""),
                ""String with only punctuation should remain unchanged"");
    }
}
```","package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the WordUtils class's uncapitalize method.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class WordUtilsTest {

    private WordUtils wordUtils;

    @BeforeEach
    void setUp() {
        wordUtils = new WordUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test uncapitalize a string with all uppercase letters"")
    void testUncapitalizeAllUppercase() {
        assertEquals(""hello"", wordUtils.uncapitalize(""HELLO""), ""Should uncapitalize all uppercase letters"");
    }

    @Test
    @DisplayName(""Test uncapitalize a string with mixed uppercase and lowercase letters"")
    void testUncapitalizeMixedCase() {
        assertEquals(""java programming"", wordUtils.uncapitalize(""Java Programming""), ""Should uncapitalize mixed case letters"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test uncapitalize a single character string"")
    void testUncapitalizeSingleCharacter() {
        assertEquals(""h"", wordUtils.uncapitalize(""H""), ""Single uppercase character should become lowercase"");
        assertEquals(""h"", wordUtils.uncapitalize(""h""), ""Single lowercase character should remain lowercase"");
    }

    @Test
    @DisplayName(""Test uncapitalize an already uncapitalized string"")
    void testUncapitalizeAlreadyUncapitalized() {
        assertEquals(""already uncapitalized"", wordUtils.uncapitalize(""already uncapitalized""), ""Should remain the same"");
    }

    // EMPTY AND NULL CASES

    @Test
    @DisplayName(""Test uncapitalize an empty string"")
    void testUncapitalizeEmptyString() {
        assertEquals("""", wordUtils.uncapitalize(""""), ""Empty string should remain empty"");
    }

    @Test
    @DisplayName(""Test uncapitalize a null string"")
    void testUncapitalizeNullString() {
        assertNull(wordUtils.uncapitalize(null), ""Null string should remain null"");
    }

    // SPECIAL CHARACTERS CASES

    @Test
    @DisplayName(""Test uncapitalize a string with special characters"")
    void testUncapitalizeSpecialCharacters() {
        assertEquals(""!hello world"", wordUtils.uncapitalize(""!Hello World""), ""Special characters should remain unchanged"");
        assertEquals(""123abc"", wordUtils.uncapitalize(""123Abc""), ""Numbers should remain unchanged"");
    }

    // MIXED CONTENT CASES

    @Test
    @DisplayName(""Test uncapitalize string with spaces and punctuation"")
    void testUncapitalizeSpacesAndPunctuation() {
        assertEquals(""hello, world!"", wordUtils.uncapitalize(""Hello, World!""), ""Should handle spaces and punctuation correctly"");
    }

    @Test
    @DisplayName(""Test uncapitalize with only punctuation"")
    void testUncapitalizeOnlyPunctuation() {
        assertEquals(""?!.,"", wordUtils.uncapitalize(""?!.,""),
                ""String with only punctuation should remain unchanged"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/WordUtilsTest.java"
"org.apache.commons.lang3.text.WordUtils.wrap(java.lang.String, int, java.lang.String, boolean)","java.lang.String wrap(java.lang.String, int, java.lang.String, boolean)","{
    boolean wrapLongWords;
    int wrapLength;
    java.lang.String newLineStr, str;
    unknown $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28, $stack29, $stack30, $stack31, $stack32, $stack33, $stack34, $stack35, $stack36, $stack37, $stack38, $stack8, $stack9, inputLineLength, offset, spaceToWrapAt, wrappedLine;


    str := @parameter0: java.lang.String;
    wrapLength := @parameter1: int;
    newLineStr := @parameter2: java.lang.String;
    wrapLongWords := @parameter3: boolean;

    if str != null goto label01;

    return null;

  label01:
    if newLineStr != null goto label02;
    newLineStr = <org.apache.commons.lang3.SystemUtils: java.lang.String LINE_SEPARATOR>;

  label02:
    $stack38 = wrapLength;
    $stack37 = 1;

    if $stack38 >= $stack37 goto label03;
    wrapLength = 1;

  label03:
    $stack32 = str;
    $stack33 = virtualinvoke str.<java.lang.String: int length()>();
    $stack34 = 0;
    offset = $stack34;
    $stack8 = new java.lang.StringBuilder;
    $stack36 = inputLineLength;
    $stack35 = 32;
    $stack9 = $stack36 + $stack35;
    specialinvoke $stack8.<java.lang.StringBuilder: void <init>(int)>($stack9);
    wrappedLine = $stack8;

  label04:
    $stack20 = inputLineLength;
    $stack19 = offset;
    $stack10 = $stack20 - $stack19;
    $stack21 = wrapLength;

    if $stack10 <= $stack21 goto label10;
    $stack14 = virtualinvoke str.<java.lang.String: char charAt(int)>(offset);

    if $stack14 != 32 goto label05;
    offset = offset + 1;

    goto label04;

  label05:
    $stack15 = wrapLength + offset;
    spaceToWrapAt = virtualinvoke str.<java.lang.String: int lastIndexOf(int,int)>(32, $stack15);

    if spaceToWrapAt < offset goto label06;
    $stack29 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(offset, spaceToWrapAt);
    $stack30 = virtualinvoke wrappedLine.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack29);
    $stack31 = virtualinvoke wrappedLine.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(newLineStr);
    offset = spaceToWrapAt + 1;

    goto label09;

  label06:
    if wrapLongWords == 0 goto label07;
    $stack25 = wrapLength + offset;
    $stack26 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(offset, $stack25);
    $stack27 = virtualinvoke wrappedLine.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack26);
    $stack28 = virtualinvoke wrappedLine.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(newLineStr);
    offset = offset + wrapLength;

    goto label09;

  label07:
    $stack16 = wrapLength + offset;
    spaceToWrapAt = virtualinvoke str.<java.lang.String: int indexOf(int,int)>(32, $stack16);

    if spaceToWrapAt < 0 goto label08;
    $stack22 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(offset, spaceToWrapAt);
    $stack23 = virtualinvoke wrappedLine.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22);
    $stack24 = virtualinvoke wrappedLine.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(newLineStr);
    offset = spaceToWrapAt + 1;

    goto label09;

  label08:
    $stack17 = virtualinvoke str.<java.lang.String: java.lang.String substring(int)>(offset);
    $stack18 = virtualinvoke wrappedLine.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17);
    offset = inputLineLength;

  label09:
    goto label04;

  label10:
    $stack11 = virtualinvoke str.<java.lang.String: java.lang.String substring(int)>(offset);
    $stack12 = virtualinvoke wrappedLine.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11);
    $stack13 = virtualinvoke wrappedLine.<java.lang.StringBuilder: java.lang.String toString()>();

    return $stack13;
}
","```java
package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the WordUtils class's wrap method.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class WordUtilsTest {

    private WordUtils wordUtils;

    @BeforeEach
    void setUp() {
        wordUtils = new WordUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test wrapping a normal sentence"")
    void testWrapNormalSentence() {
        String str = ""The quick brown fox jumps over the lazy dog."";
        int wrapLength = 10;
        String newLineStr = ""\n"";
        boolean wrapLongWords = true;

        String expected = ""The quick\nbrown fox\njumps over\nthe lazy\ndog."";
        assertEquals(expected, wordUtils.wrap(str, wrapLength, newLineStr, wrapLongWords));
    }

    @Test
    @DisplayName(""Test wrapping with wrapLongWords false"")
    void testWrapWithoutLongWords() {
        String str = ""Exceptionallydifficultword"";
        int wrapLength = 5;
        String newLineStr = ""\n"";
        boolean wrapLongWords = false;

        String expected = ""Exceptionallydifficultword"";
        assertEquals(expected, wordUtils.wrap(str, wrapLength, newLineStr, wrapLongWords));
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test wrapping with null string"")
    void testWrapNullString() {
        assertNull(wordUtils.wrap(null, 10, ""\n"", true));
    }

    @Test
    @DisplayName(""Test wrapping with empty string"")
    void testWrapEmptyString() {
        String str = """";
        int wrapLength = 5;
        String newLineStr = ""\n"";
        boolean wrapLongWords = true;

        assertEquals("""", wordUtils.wrap(str, wrapLength, newLineStr, wrapLongWords));
    }

    @Test
    @DisplayName(""Test wrapping with newLineStr as null"")
    void testWrapNullNewLineStr() {
        String str = ""Line to be wrapped"";
        int wrapLength = 5;
        boolean wrapLongWords = true;

        String expected = ""Line\nto be\nwrapp\ned"";
        assertEquals(expected, wordUtils.wrap(str, wrapLength, null, wrapLongWords));
    }

    @Test
    @DisplayName(""Test wrapping with wrap length zero"")
    void testWrapWithZeroLength() {
        String str = ""Unwrappable"";
        int wrapLength = 0;
        String newLineStr = ""\n"";
        boolean wrapLongWords = true;

        String expected = ""U\nn\nw\nr\na\np\np\na\nb\nl\ne"";
        assertEquals(expected, wordUtils.wrap(str, wrapLength, newLineStr, wrapLongWords));
    }

    @Test
    @DisplayName(""Test wrapping with single character"")
    void testWrapSingleCharacter() {
        String str = ""a"";
        int wrapLength = 5;
        String newLineStr = ""\n"";
        boolean wrapLongWords = true;

        assertEquals(""a"", wordUtils.wrap(str, wrapLength, newLineStr, wrapLongWords));
    }

    // EDGE CASES (BOUNDARY VALUES)

    @Test
    @DisplayName(""Test wrapping with wrapLength equal to string length"")
    void testWrapLengthEqualsStringLength() {
        String str = ""Equal"";
        int wrapLength = 5;
        String newLineStr = ""\n"";
        boolean wrapLongWords = true;

        assertEquals(""Equal"", wordUtils.wrap(str, wrapLength, newLineStr, wrapLongWords));
    }

    @Test
    @DisplayName(""Test wrapping with wrapLength greater than string length"")
    void testWrapWithLargeWrapLength() {
        String str = ""Short"";
        int wrapLength = 10;
        String newLineStr = ""\n"";
        boolean wrapLongWords = false;

        assertEquals(""Short"", wordUtils.wrap(str, wrapLength, newLineStr, wrapLongWords));
    }

    // CORNER CASES

    @Test
    @DisplayName(""Test wrapping when wrapLength is one"")
    void testWrapLengthOne() {
        String str = ""Word"";
        int wrapLength = 1;
        String newLineStr = ""\n"";
        boolean wrapLongWords = true;

        String expected = ""W\no\nr\nd"";
        assertEquals(expected, wordUtils.wrap(str, wrapLength, newLineStr, wrapLongWords));
    }

    @Test
    @DisplayName(""Test wrapping with no spaces and wrapLongWords true"")
    void testWrapNoSpacesLongWordsTrue() {
        String str = ""NoSpacesHereAndLongWord"";
        int wrapLength = 5;
        String newLineStr = ""\n"";
        boolean wrapLongWords = true;

        String expected = ""NoSpa\ncesHe\nreAnd\nLongW\nord"";
        assertEquals(expected, wordUtils.wrap(str, wrapLength, newLineStr, wrapLongWords));
    }
}
```","package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the WordUtils class's wrap method.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class WordUtilsTest {

    private WordUtils wordUtils;

    @BeforeEach
    void setUp() {
        wordUtils = new WordUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test wrapping a normal sentence"")
    void testWrapNormalSentence() {
        String str = ""The quick brown fox jumps over the lazy dog."";
        int wrapLength = 10;
        String newLineStr = ""\n"";
        boolean wrapLongWords = true;

        String expected = ""The quick\nbrown fox\njumps over\nthe lazy\ndog."";
        assertEquals(expected, wordUtils.wrap(str, wrapLength, newLineStr, wrapLongWords));
    }

    @Test
    @DisplayName(""Test wrapping with wrapLongWords false"")
    void testWrapWithoutLongWords() {
        String str = ""Exceptionallydifficultword"";
        int wrapLength = 5;
        String newLineStr = ""\n"";
        boolean wrapLongWords = false;

        String expected = ""Exceptionallydifficultword"";
        assertEquals(expected, wordUtils.wrap(str, wrapLength, newLineStr, wrapLongWords));
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test wrapping with null string"")
    void testWrapNullString() {
        assertNull(wordUtils.wrap(null, 10, ""\n"", true));
    }

    @Test
    @DisplayName(""Test wrapping with empty string"")
    void testWrapEmptyString() {
        String str = """";
        int wrapLength = 5;
        String newLineStr = ""\n"";
        boolean wrapLongWords = true;

        assertEquals("""", wordUtils.wrap(str, wrapLength, newLineStr, wrapLongWords));
    }

    @Test
    @DisplayName(""Test wrapping with newLineStr as null"")
    void testWrapNullNewLineStr() {
        String str = ""Line to be wrapped"";
        int wrapLength = 5;
        boolean wrapLongWords = true;

        String expected = ""Line\nto be\nwrapp\ned"";
        assertEquals(expected, wordUtils.wrap(str, wrapLength, null, wrapLongWords));
    }

    @Test
    @DisplayName(""Test wrapping with wrap length zero"")
    void testWrapWithZeroLength() {
        String str = ""Unwrappable"";
        int wrapLength = 0;
        String newLineStr = ""\n"";
        boolean wrapLongWords = true;

        String expected = ""U\nn\nw\nr\na\np\np\na\nb\nl\ne"";
        assertEquals(expected, wordUtils.wrap(str, wrapLength, newLineStr, wrapLongWords));
    }

    @Test
    @DisplayName(""Test wrapping with single character"")
    void testWrapSingleCharacter() {
        String str = ""a"";
        int wrapLength = 5;
        String newLineStr = ""\n"";
        boolean wrapLongWords = true;

        assertEquals(""a"", wordUtils.wrap(str, wrapLength, newLineStr, wrapLongWords));
    }

    // EDGE CASES (BOUNDARY VALUES)

    @Test
    @DisplayName(""Test wrapping with wrapLength equal to string length"")
    void testWrapLengthEqualsStringLength() {
        String str = ""Equal"";
        int wrapLength = 5;
        String newLineStr = ""\n"";
        boolean wrapLongWords = true;

        assertEquals(""Equal"", wordUtils.wrap(str, wrapLength, newLineStr, wrapLongWords));
    }

    @Test
    @DisplayName(""Test wrapping with wrapLength greater than string length"")
    void testWrapWithLargeWrapLength() {
        String str = ""Short"";
        int wrapLength = 10;
        String newLineStr = ""\n"";
        boolean wrapLongWords = false;

        assertEquals(""Short"", wordUtils.wrap(str, wrapLength, newLineStr, wrapLongWords));
    }

    // CORNER CASES

    @Test
    @DisplayName(""Test wrapping when wrapLength is one"")
    void testWrapLengthOne() {
        String str = ""Word"";
        int wrapLength = 1;
        String newLineStr = ""\n"";
        boolean wrapLongWords = true;

        String expected = ""W\no\nr\nd"";
        assertEquals(expected, wordUtils.wrap(str, wrapLength, newLineStr, wrapLongWords));
    }

    @Test
    @DisplayName(""Test wrapping with no spaces and wrapLongWords true"")
    void testWrapNoSpacesLongWordsTrue() {
        String str = ""NoSpacesHereAndLongWord"";
        int wrapLength = 5;
        String newLineStr = ""\n"";
        boolean wrapLongWords = true;

        String expected = ""NoSpa\ncesHe\nreAnd\nLongW\nord"";
        assertEquals(expected, wordUtils.wrap(str, wrapLength, newLineStr, wrapLongWords));
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/WordUtilsTest.java"
"org.apache.commons.lang3.text.WordUtils.swapCase(java.lang.String)","java.lang.String swapCase(java.lang.String)","{
    java.lang.String str;
    unknown $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack5, $stack6, $stack7, $stack8, $stack9, buffer, ch, i, whitespace;


    str := @parameter0: java.lang.String;
    $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(str);

    if $stack5 == 0 goto label1;

    return str;

  label1:
    buffer = virtualinvoke str.<java.lang.String: char[] toCharArray()>();
    whitespace = 1;
    i = 0;

  label2:
    $stack12 = i;
    $stack11 = buffer;
    $stack6 = lengthof $stack11;

    if $stack12 >= $stack6 goto label8;
    ch = buffer[i];
    $stack8 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(ch);

    if $stack8 == 0 goto label3;
    $stack16 = staticinvoke <java.lang.Character: char toLowerCase(char)>(ch);
    buffer[i] = $stack16;
    whitespace = 0;

    goto label7;

  label3:
    $stack9 = staticinvoke <java.lang.Character: boolean isTitleCase(char)>(ch);

    if $stack9 == 0 goto label4;
    $stack15 = staticinvoke <java.lang.Character: char toLowerCase(char)>(ch);
    buffer[i] = $stack15;
    whitespace = 0;

    goto label7;

  label4:
    $stack10 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>(ch);

    if $stack10 == 0 goto label6;

    if whitespace == 0 goto label5;
    $stack14 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch);
    buffer[i] = $stack14;
    whitespace = 0;

    goto label7;

  label5:
    $stack13 = staticinvoke <java.lang.Character: char toUpperCase(char)>(ch);
    buffer[i] = $stack13;

    goto label7;

  label6:
    whitespace = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch);

  label7:
    i = i + 1;

    goto label2;

  label8:
    $stack7 = new java.lang.String;
    specialinvoke $stack7.<java.lang.String: void <init>(char[])>(buffer);

    return $stack7;
}
","```java
package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the WordUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class WordUtilsTest {

    private WordUtils wordUtils;

    @BeforeEach
    void setUp() {
        wordUtils = new WordUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test swapCase on a mixed case string"")
    void testSwapCaseMixedCase() {
        assertEquals(""hELLO wORLD"", wordUtils.swapCase(""Hello World""), ""Should swap case of each character"");
    }

    @Test
    @DisplayName(""Test swapCase on a string with title case"")
    void testSwapCaseTitleCase() {
        assertEquals(""hELLO wORLD"", wordUtils.swapCase(""Hello World""), ""Should handle title case correctly"");
    }

    @Test
    @DisplayName(""Test swapCase on a lowercase string"")
    void testSwapCaseLowerCase() {
        assertEquals(""HELLO WORLD"", wordUtils.swapCase(""hello world""), ""Lowercase should be swapped to uppercase"");
    }

    @Test
    @DisplayName(""Test swapCase on an uppercase string"")
    void testSwapCaseUpperCase() {
        assertEquals(""hello world"", wordUtils.swapCase(""HELLO WORLD""), ""Uppercase should be swapped to lowercase"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test swapCase on a single character"")
    void testSwapCaseSingleChar() {
        assertEquals(""h"", wordUtils.swapCase(""H""), ""Single uppercase char should be converted to lowercase"");
        assertEquals(""H"", wordUtils.swapCase(""h""), ""Single lowercase char should be converted to uppercase"");
    }

    @Test
    @DisplayName(""Test swapCase on a string with whitespace"")
    void testSwapCaseWithWhitespace() {
        assertEquals(""  \t\n"", wordUtils.swapCase(""  \t\n""), ""Whitespace only string should remain unchanged"");
    }

    @Test
    @DisplayName(""Test swapCase on a string with punctuation"")
    void testSwapCaseWithPunctuation() {
        assertEquals(""!@#"", wordUtils.swapCase(""!@#""), ""Punctuation only string should remain unchanged"");
    }

    // CORNER CASES

    @Test
    @DisplayName(""Test swapCase on an empty string"")
    void testSwapCaseEmptyString() {
        assertEquals("""", wordUtils.swapCase(""""), ""Empty string should remain unchanged"");
    }

    @Test
    @DisplayName(""Test swapCase on a string with mixed digits and letters"")
    void testSwapCaseMixedDigitsAndLetters() {
        assertEquals(""123aBC"", wordUtils.swapCase(""123Abc""), ""Digits should remain unchanged, swap case for letters"");
    }

    @Test
    @DisplayName(""Test swapCase maintaining title after whitespace"")
    void testSwapCaseTitleAfterWhitespace() {
        assertEquals(""hELLO wORLD. tHIS Is a Test"", wordUtils.swapCase(""Hello World. This is A test""), ""Title case should be maintained after whitespace"");
    }

    // ERROR CASES

    @Test
    @DisplayName(""Test swapCase on null string"")
    void testSwapCaseNullString() {
        assertNull(wordUtils.swapCase(null), ""Null string should return null"");
    }
}
```","package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the WordUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class WordUtilsTest {

    private WordUtils wordUtils;

    @BeforeEach
    void setUp() {
        wordUtils = new WordUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test swapCase on a mixed case string"")
    void testSwapCaseMixedCase() {
        assertEquals(""hELLO wORLD"", wordUtils.swapCase(""Hello World""), ""Should swap case of each character"");
    }

    @Test
    @DisplayName(""Test swapCase on a string with title case"")
    void testSwapCaseTitleCase() {
        assertEquals(""hELLO wORLD"", wordUtils.swapCase(""Hello World""), ""Should handle title case correctly"");
    }

    @Test
    @DisplayName(""Test swapCase on a lowercase string"")
    void testSwapCaseLowerCase() {
        assertEquals(""HELLO WORLD"", wordUtils.swapCase(""hello world""), ""Lowercase should be swapped to uppercase"");
    }

    @Test
    @DisplayName(""Test swapCase on an uppercase string"")
    void testSwapCaseUpperCase() {
        assertEquals(""hello world"", wordUtils.swapCase(""HELLO WORLD""), ""Uppercase should be swapped to lowercase"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test swapCase on a single character"")
    void testSwapCaseSingleChar() {
        assertEquals(""h"", wordUtils.swapCase(""H""), ""Single uppercase char should be converted to lowercase"");
        assertEquals(""H"", wordUtils.swapCase(""h""), ""Single lowercase char should be converted to uppercase"");
    }

    @Test
    @DisplayName(""Test swapCase on a string with whitespace"")
    void testSwapCaseWithWhitespace() {
        assertEquals(""  \t\n"", wordUtils.swapCase(""  \t\n""), ""Whitespace only string should remain unchanged"");
    }

    @Test
    @DisplayName(""Test swapCase on a string with punctuation"")
    void testSwapCaseWithPunctuation() {
        assertEquals(""!@#"", wordUtils.swapCase(""!@#""), ""Punctuation only string should remain unchanged"");
    }

    // CORNER CASES

    @Test
    @DisplayName(""Test swapCase on an empty string"")
    void testSwapCaseEmptyString() {
        assertEquals("""", wordUtils.swapCase(""""), ""Empty string should remain unchanged"");
    }

    @Test
    @DisplayName(""Test swapCase on a string with mixed digits and letters"")
    void testSwapCaseMixedDigitsAndLetters() {
        assertEquals(""123aBC"", wordUtils.swapCase(""123Abc""), ""Digits should remain unchanged, swap case for letters"");
    }

    @Test
    @DisplayName(""Test swapCase maintaining title after whitespace"")
    void testSwapCaseTitleAfterWhitespace() {
        assertEquals(""hELLO wORLD. tHIS Is a Test"", wordUtils.swapCase(""Hello World. This is A test""), ""Title case should be maintained after whitespace"");
    }

    // ERROR CASES

    @Test
    @DisplayName(""Test swapCase on null string"")
    void testSwapCaseNullString() {
        assertNull(wordUtils.swapCase(null), ""Null string should return null"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/WordUtilsTest.java"
"org.apache.commons.lang3.text.WordUtils.capitalize(java.lang.String)","java.lang.String capitalize(java.lang.String)","{
    java.lang.String str;
    unknown $stack1;


    str := @parameter0: java.lang.String;
    $stack1 = staticinvoke <org.apache.commons.lang3.text.WordUtils: java.lang.String capitalize(java.lang.String,char[])>(str, null);

    return $stack1;
}
","```java
package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the WordUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class WordUtilsTest {

    private WordUtils wordUtils;

    @BeforeEach
    void setUp() {
        wordUtils = new WordUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test capitalizing a normal sentence"")
    void testCapitalizeNormalSentence() {
        String input = ""hello world"";
        String expected = ""Hello World"";
        assertEquals(expected, wordUtils.capitalize(input), ""Capitalizing 'hello world' should result in 'Hello World'"");
    }

    @Test
    @DisplayName(""Test capitalizing a sentence with mixed cases"")
    void testCapitalizeMixedCase() {
        String input = ""heLLo WoRLd"";
        String expected = ""Hello World"";
        assertEquals(expected, wordUtils.capitalize(input), ""Capitalizing 'heLLo WoRLd' should result in 'Hello World'"");
    }

    @Test
    @DisplayName(""Test capitalizing a sentence with numbers"")
    void testCapitalizeWithNumbers() {
        String input = ""hello world 123"";
        String expected = ""Hello World 123"";
        assertEquals(expected, wordUtils.capitalize(input), ""Capitalizing 'hello world 123' should result in 'Hello World 123'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test capitalizing a single word"")
    void testCapitalizeSingleWord() {
        String input = ""hello"";
        String expected = ""Hello"";
        assertEquals(expected, wordUtils.capitalize(input), ""Capitalizing 'hello' should result in 'Hello'"");
    }

    @Test
    @DisplayName(""Test capitalizing an already capitalized string"")
    void testCapitalizeAlreadyCapitalized() {
        String input = ""Hello World"";
        assertEquals(input, wordUtils.capitalize(input), ""An already capitalized 'Hello World' should remain unchanged"");
    }

    // CORNER CASES

    @Test
    @DisplayName(""Test capitalizing an empty string"")
    void testCapitalizeEmptyString() {
        String input = """";
        assertEquals("""", wordUtils.capitalize(input), ""Capitalizing an empty string should return empty string"");
    }

    @Test
    @DisplayName(""Test capitalizing a string with special characters"")
    void testCapitalizeWithSpecialCharacters() {
        String input = ""hello! world?"";
        String expected = ""Hello! World?"";
        assertEquals(expected, wordUtils.capitalize(input), ""Capitalizing 'hello! world?' should result in 'Hello! World?'"");
    }

    // ERROR CASES

    @Test
    @DisplayName(""Test capitalizing a null string"")
    void testCapitalizeNullString() {
        String input = null;
        assertNull(wordUtils.capitalize(input), ""Capitalizing a null string should return null"");
    }
}
```","package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the WordUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class WordUtilsTest {

    private WordUtils wordUtils;

    @BeforeEach
    void setUp() {
        wordUtils = new WordUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test capitalizing a normal sentence"")
    void testCapitalizeNormalSentence() {
        String input = ""hello world"";
        String expected = ""Hello World"";
        assertEquals(expected, wordUtils.capitalize(input), ""Capitalizing 'hello world' should result in 'Hello World'"");
    }

    @Test
    @DisplayName(""Test capitalizing a sentence with mixed cases"")
    void testCapitalizeMixedCase() {
        String input = ""heLLo WoRLd"";
        String expected = ""Hello World"";
        assertEquals(expected, wordUtils.capitalize(input), ""Capitalizing 'heLLo WoRLd' should result in 'Hello World'"");
    }

    @Test
    @DisplayName(""Test capitalizing a sentence with numbers"")
    void testCapitalizeWithNumbers() {
        String input = ""hello world 123"";
        String expected = ""Hello World 123"";
        assertEquals(expected, wordUtils.capitalize(input), ""Capitalizing 'hello world 123' should result in 'Hello World 123'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test capitalizing a single word"")
    void testCapitalizeSingleWord() {
        String input = ""hello"";
        String expected = ""Hello"";
        assertEquals(expected, wordUtils.capitalize(input), ""Capitalizing 'hello' should result in 'Hello'"");
    }

    @Test
    @DisplayName(""Test capitalizing an already capitalized string"")
    void testCapitalizeAlreadyCapitalized() {
        String input = ""Hello World"";
        assertEquals(input, wordUtils.capitalize(input), ""An already capitalized 'Hello World' should remain unchanged"");
    }

    // CORNER CASES

    @Test
    @DisplayName(""Test capitalizing an empty string"")
    void testCapitalizeEmptyString() {
        String input = """";
        assertEquals("""", wordUtils.capitalize(input), ""Capitalizing an empty string should return empty string"");
    }

    @Test
    @DisplayName(""Test capitalizing a string with special characters"")
    void testCapitalizeWithSpecialCharacters() {
        String input = ""hello! world?"";
        String expected = ""Hello! World?"";
        assertEquals(expected, wordUtils.capitalize(input), ""Capitalizing 'hello! world?' should result in 'Hello! World?'"");
    }

    // ERROR CASES

    @Test
    @DisplayName(""Test capitalizing a null string"")
    void testCapitalizeNullString() {
        String input = null;
        assertNull(wordUtils.capitalize(input), ""Capitalizing a null string should return null"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/WordUtilsTest.java"
"org.apache.commons.lang3.text.WordUtils.capitalize(java.lang.String, char[])","java.lang.String capitalize(java.lang.String, char[])","{
    char[] delimiters;
    java.lang.String str;
    unknown $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack7, $stack8, $stack9, buffer, capitalizeNext, ch, delimLen, i;


    str := @parameter0: java.lang.String;
    delimiters := @parameter1: char[];

    if delimiters != null goto label1;
    $stack15 = -1;

    goto label2;

  label1:
    $stack15 = lengthof delimiters;

  label2:
    $stack16 = str;
    $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>($stack16);

    if $stack7 != 0 goto label3;

    if delimLen != 0 goto label4;

  label3:
    $stack14 = str;

    return $stack14;

  label4:
    buffer = virtualinvoke str.<java.lang.String: char[] toCharArray()>();
    capitalizeNext = 1;
    i = 0;

  label5:
    $stack12 = i;
    $stack11 = buffer;
    $stack8 = lengthof $stack11;

    if $stack12 >= $stack8 goto label8;
    ch = buffer[i];
    $stack10 = staticinvoke <org.apache.commons.lang3.text.WordUtils: boolean isDelimiter(char,char[])>(ch, delimiters);

    if $stack10 == 0 goto label6;
    capitalizeNext = 1;

    goto label7;

  label6:
    if capitalizeNext == 0 goto label7;
    $stack13 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch);
    buffer[i] = $stack13;
    capitalizeNext = 0;

  label7:
    i = i + 1;

    goto label5;

  label8:
    $stack9 = new java.lang.String;
    specialinvoke $stack9.<java.lang.String: void <init>(char[])>(buffer);

    return $stack9;
}
","```java
package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;
import org.apache.commons.lang3.StringUtils;

/**
 * Rigorous JUnit 5 tests for the capitalize method in the WordUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class WordUtilsTest {

    private WordUtils wordUtils;

    @BeforeEach
    void setUp() {
        wordUtils = new WordUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Capitalize each word in a string with space as default delimiter"")
    void testCapitalizeWithSpaces() {
        assertEquals(""Hello World"", wordUtils.capitalize(""hello world"", ' '), 
                ""Each word should be capitalized in 'hello world'"");
    }

    @Test
    @DisplayName(""Capitalize a single word"")
    void testCapitalizeSingleWord() {
        assertEquals(""Hello"", wordUtils.capitalize(""hello"", ' '), 
                ""Single word should be capitalized"");
    }

    @Test
    @DisplayName(""Capitalize words with multiple spaces"")
    void testCapitalizeWithMultipleSpaces() {
        assertEquals(""Hello   World"", wordUtils.capitalize(""hello   world"", ' '), 
                ""Each word should be capitalized, ignoring multiple spaces"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Capitalize empty string"")
    void testCapitalizeEmptyString() {
        assertEquals("""", wordUtils.capitalize("""", ' '), ""Empty string should return empty string"");
    }

    @Test
    @DisplayName(""Capitalize null string"")
    void testCapitalizeNullString() {
        assertNull(wordUtils.capitalize(null, ' '), ""Null string should return null"");
    }

    @Test
    @DisplayName(""Capitalize with custom delimiters"")
    void testCapitalizeWithCustomDelimiters() {
        assertEquals(""Hello-World"", wordUtils.capitalize(""hello-world"", '-'), 
                ""Words should be capitalized using '-' as a delimiter"");
    }

    @Test
    @DisplayName(""Capitalize with mixed delimiters"")
    void testCapitalizeWithMixedDelimiters() {
        char[] delimiters = {'-', ' '};
        assertEquals(""Hello-World Test"", wordUtils.capitalize(""hello-world test"", delimiters), 
                ""Words should be capitalized using mixed delimiters"");
    }

    @Test
    @DisplayName(""Capitalize when delimiters overlap"")
    void testCapitalizeWhenDelimitersOverlap() {
        char[] delimiters = {'-'};
        assertEquals(""Hello-World"", wordUtils.capitalize(""HELLO-WORLD"", delimiters), 
                ""Already capitalized words should not change with delimiters"");
    }

    // CORNER CASES

    @Test
    @DisplayName(""Capitalize words with leading and trailing delimiters"")
    void testLeadingAndTrailingDelimiters() {
        assertEquals("" Hello World "", wordUtils.capitalize("" hello world "", ' '), 
                ""Leading and trailing spaces should be preserved"");
    }

    @Test
    @DisplayName(""Capitalize words with all characters being delimiters"")
    void testAllDelimiters() {
        assertEquals(""---"", wordUtils.capitalize(""---"", '-'), 
                ""String of delimiters should remain unchanged"");
    }

    // ERROR CASES

    @Test
    @DisplayName(""Capitalize with null as delimiters array"")
    void testCapitalizeNullDelimiters() {
        assertEquals(""Hello World"", wordUtils.capitalize(""hello world"", null), 
                ""Null delimiters should be treated as no delimiters, preserving input"");
    }

    @Test
    @DisplayName(""Capitalize with empty delimiters array"")
    void testCapitalizeEmptyDelimitersArray() {
        char[] emptyDelimiters = {};
        assertEquals(""Hello world"", wordUtils.capitalize(""hello world"", emptyDelimiters), 
                ""Empty delimiters array should result in capitalizing the first word only"");
    }
}
```","package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;
import org.apache.commons.lang3.StringUtils;

/**
 * Rigorous JUnit 5 tests for the capitalize method in the WordUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class WordUtilsTest {

    private WordUtils wordUtils;

    @BeforeEach
    void setUp() {
        wordUtils = new WordUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Capitalize each word in a string with space as default delimiter"")
    void testCapitalizeWithSpaces() {
        assertEquals(""Hello World"", wordUtils.capitalize(""hello world"", ' '), 
                ""Each word should be capitalized in 'hello world'"");
    }

    @Test
    @DisplayName(""Capitalize a single word"")
    void testCapitalizeSingleWord() {
        assertEquals(""Hello"", wordUtils.capitalize(""hello"", ' '), 
                ""Single word should be capitalized"");
    }

    @Test
    @DisplayName(""Capitalize words with multiple spaces"")
    void testCapitalizeWithMultipleSpaces() {
        assertEquals(""Hello   World"", wordUtils.capitalize(""hello   world"", ' '), 
                ""Each word should be capitalized, ignoring multiple spaces"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Capitalize empty string"")
    void testCapitalizeEmptyString() {
        assertEquals("""", wordUtils.capitalize("""", ' '), ""Empty string should return empty string"");
    }

    @Test
    @DisplayName(""Capitalize null string"")
    void testCapitalizeNullString() {
        assertNull(wordUtils.capitalize(null, ' '), ""Null string should return null"");
    }

    @Test
    @DisplayName(""Capitalize with custom delimiters"")
    void testCapitalizeWithCustomDelimiters() {
        assertEquals(""Hello-World"", wordUtils.capitalize(""hello-world"", '-'), 
                ""Words should be capitalized using '-' as a delimiter"");
    }

    @Test
    @DisplayName(""Capitalize with mixed delimiters"")
    void testCapitalizeWithMixedDelimiters() {
        char[] delimiters = {'-', ' '};
        assertEquals(""Hello-World Test"", wordUtils.capitalize(""hello-world test"", delimiters), 
                ""Words should be capitalized using mixed delimiters"");
    }

    @Test
    @DisplayName(""Capitalize when delimiters overlap"")
    void testCapitalizeWhenDelimitersOverlap() {
        char[] delimiters = {'-'};
        assertEquals(""Hello-World"", wordUtils.capitalize(""HELLO-WORLD"", delimiters), 
                ""Already capitalized words should not change with delimiters"");
    }

    // CORNER CASES

    @Test
    @DisplayName(""Capitalize words with leading and trailing delimiters"")
    void testLeadingAndTrailingDelimiters() {
        assertEquals("" Hello World "", wordUtils.capitalize("" hello world "", ' '), 
                ""Leading and trailing spaces should be preserved"");
    }

    @Test
    @DisplayName(""Capitalize words with all characters being delimiters"")
    void testAllDelimiters() {
        assertEquals(""---"", wordUtils.capitalize(""---"", '-'), 
                ""String of delimiters should remain unchanged"");
    }

    // ERROR CASES

    @Test
    @DisplayName(""Capitalize with null as delimiters array"")
    void testCapitalizeNullDelimiters() {
        assertEquals(""Hello World"", wordUtils.capitalize(""hello world"", null), 
                ""Null delimiters should be treated as no delimiters, preserving input"");
    }

    @Test
    @DisplayName(""Capitalize with empty delimiters array"")
    void testCapitalizeEmptyDelimitersArray() {
        char[] emptyDelimiters = {};
        assertEquals(""Hello world"", wordUtils.capitalize(""hello world"", emptyDelimiters), 
                ""Empty delimiters array should result in capitalizing the first word only"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/WordUtilsTest.java"
"org.apache.commons.lang3.text.WordUtils.capitalizeFully(java.lang.String, char[])","java.lang.String capitalizeFully(java.lang.String, char[])","{
    char[] delimiters;
    java.lang.String str;
    unknown $stack3, $stack4, $stack5, $stack6, $stack7, delimLen;


    str := @parameter0: java.lang.String;
    delimiters := @parameter1: char[];

    if delimiters != null goto label1;
    $stack6 = -1;

    goto label2;

  label1:
    $stack6 = lengthof delimiters;

  label2:
    $stack7 = str;
    $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>($stack7);

    if $stack3 != 0 goto label3;

    if delimLen != 0 goto label4;

  label3:
    $stack5 = str;

    return $stack5;

  label4:
    str = virtualinvoke str.<java.lang.String: java.lang.String toLowerCase()>();
    $stack4 = staticinvoke <org.apache.commons.lang3.text.WordUtils: java.lang.String capitalize(java.lang.String,char[])>(str, delimiters);

    return $stack4;
}
","```java
package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the WordUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class WordUtilsTest {

    private WordUtils wordUtils;

    @BeforeEach
    void setUp() {
        wordUtils = new WordUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Capitalize fully a simple phrase with default delimiters"")
    void testCapitalizeSimplePhrase() {
        String input = ""hello world"";
        assertEquals(""Hello World"", wordUtils.capitalizeFully(input, null), ""Should capitalize each word"");
    }

    @Test
    @DisplayName(""Capitalize fully a phrase with custom delimiters"")
    void testCapitalizeWithCustomDelimiters() {
        String input = ""hello.world"";
        char[] delimiters = {'.'};
        assertEquals(""Hello.World"", wordUtils.capitalizeFully(input, delimiters), ""Should capitalize based on custom delimiter '.'"");
    }

    @Test
    @DisplayName(""Capitalize fully a phrase with mixed case"")
    void testCapitalizeMixedCase() {
        String input = ""hElLo WoRLD"";
        assertEquals(""Hello World"", wordUtils.capitalizeFully(input, null), ""Should correct mixed case capitalization"");
    }

    // EDGE CASES (Empty and Null inputs)

    @Test
    @DisplayName(""Capitalize fully with null string"")
    void testCapitalizeNullString() {
        String input = null;
        assertEquals(null, wordUtils.capitalizeFully(input, null), ""Null input should return null"");
    }

    @Test
    @DisplayName(""Capitalize fully with empty string"")
    void testCapitalizeEmptyString() {
        String input = """";
        assertEquals("""", wordUtils.capitalizeFully(input, null), ""Empty string should return empty"");
    }

    @Test
    @DisplayName(""Capitalize fully with empty delimiters"")
    void testCapitalizeEmptyDelimiters() {
        String input = ""hello world"";
        char[] delimiters = {};
        assertEquals(""Hello World"", wordUtils.capitalizeFully(input, delimiters), ""Empty delimiters should behave like default"");
    }

    // EDGE CASES (Single character or single word inputs)

    @Test
    @DisplayName(""Capitalize fully a single character"")
    void testCapitalizeSingleCharacter() {
        String input = ""a"";
        assertEquals(""A"", wordUtils.capitalizeFully(input, null), ""Single character should be capitalized"");
    }

    @Test
    @DisplayName(""Capitalize fully a single word"")
    void testCapitalizeSingleWord() {
        String input = ""word"";
        assertEquals(""Word"", wordUtils.capitalizeFully(input, null), ""Single word should be capitalized"");
    }

    // EDGE CASES (Special characters and numbers)

    @Test
    @DisplayName(""Capitalize fully a phrase with numbers and punctuations"")
    void testCapitalizeWithNumbersAndPunctuations() {
        String input = ""hello world 123!"";
        assertEquals(""Hello World 123!"", wordUtils.capitalizeFully(input, null), ""Should handle numbers and symbols without affecting them"");
    }

    // SPECIAL CASES (Delimiters impact)

    @Test
    @DisplayName(""Capitalize fully with multiple different delimiters"")
    void testCapitalizeWithMultipleDelimiters() {
        String input = ""hello-world_test"";
        char[] delimiters = {'-', '_'};
        assertEquals(""Hello-World_Test"", wordUtils.capitalizeFully(input, delimiters), ""Should handle multiple delimiters"");
    }
}
```","package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the WordUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class WordUtilsTest {

    private WordUtils wordUtils;

    @BeforeEach
    void setUp() {
        wordUtils = new WordUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Capitalize fully a simple phrase with default delimiters"")
    void testCapitalizeSimplePhrase() {
        String input = ""hello world"";
        assertEquals(""Hello World"", wordUtils.capitalizeFully(input, null), ""Should capitalize each word"");
    }

    @Test
    @DisplayName(""Capitalize fully a phrase with custom delimiters"")
    void testCapitalizeWithCustomDelimiters() {
        String input = ""hello.world"";
        char[] delimiters = {'.'};
        assertEquals(""Hello.World"", wordUtils.capitalizeFully(input, delimiters), ""Should capitalize based on custom delimiter '.'"");
    }

    @Test
    @DisplayName(""Capitalize fully a phrase with mixed case"")
    void testCapitalizeMixedCase() {
        String input = ""hElLo WoRLD"";
        assertEquals(""Hello World"", wordUtils.capitalizeFully(input, null), ""Should correct mixed case capitalization"");
    }

    // EDGE CASES (Empty and Null inputs)

    @Test
    @DisplayName(""Capitalize fully with null string"")
    void testCapitalizeNullString() {
        String input = null;
        assertEquals(null, wordUtils.capitalizeFully(input, null), ""Null input should return null"");
    }

    @Test
    @DisplayName(""Capitalize fully with empty string"")
    void testCapitalizeEmptyString() {
        String input = """";
        assertEquals("""", wordUtils.capitalizeFully(input, null), ""Empty string should return empty"");
    }

    @Test
    @DisplayName(""Capitalize fully with empty delimiters"")
    void testCapitalizeEmptyDelimiters() {
        String input = ""hello world"";
        char[] delimiters = {};
        assertEquals(""Hello World"", wordUtils.capitalizeFully(input, delimiters), ""Empty delimiters should behave like default"");
    }

    // EDGE CASES (Single character or single word inputs)

    @Test
    @DisplayName(""Capitalize fully a single character"")
    void testCapitalizeSingleCharacter() {
        String input = ""a"";
        assertEquals(""A"", wordUtils.capitalizeFully(input, null), ""Single character should be capitalized"");
    }

    @Test
    @DisplayName(""Capitalize fully a single word"")
    void testCapitalizeSingleWord() {
        String input = ""word"";
        assertEquals(""Word"", wordUtils.capitalizeFully(input, null), ""Single word should be capitalized"");
    }

    // EDGE CASES (Special characters and numbers)

    @Test
    @DisplayName(""Capitalize fully a phrase with numbers and punctuations"")
    void testCapitalizeWithNumbersAndPunctuations() {
        String input = ""hello world 123!"";
        assertEquals(""Hello World 123!"", wordUtils.capitalizeFully(input, null), ""Should handle numbers and symbols without affecting them"");
    }

    // SPECIAL CASES (Delimiters impact)

    @Test
    @DisplayName(""Capitalize fully with multiple different delimiters"")
    void testCapitalizeWithMultipleDelimiters() {
        String input = ""hello-world_test"";
        char[] delimiters = {'-', '_'};
        assertEquals(""Hello-World_Test"", wordUtils.capitalizeFully(input, delimiters), ""Should handle multiple delimiters"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/WordUtilsTest.java"
"org.apache.commons.lang3.text.WordUtils.uncapitalize(java.lang.String, char[])","java.lang.String uncapitalize(java.lang.String, char[])","{
    char[] delimiters;
    java.lang.String str;
    unknown $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack7, $stack8, $stack9, buffer, ch, delimLen, i, uncapitalizeNext;


    str := @parameter0: java.lang.String;
    delimiters := @parameter1: char[];

    if delimiters != null goto label1;
    $stack15 = -1;

    goto label2;

  label1:
    $stack15 = lengthof delimiters;

  label2:
    $stack16 = str;
    $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>($stack16);

    if $stack7 != 0 goto label3;

    if delimLen != 0 goto label4;

  label3:
    $stack14 = str;

    return $stack14;

  label4:
    buffer = virtualinvoke str.<java.lang.String: char[] toCharArray()>();
    uncapitalizeNext = 1;
    i = 0;

  label5:
    $stack12 = i;
    $stack11 = buffer;
    $stack8 = lengthof $stack11;

    if $stack12 >= $stack8 goto label8;
    ch = buffer[i];
    $stack10 = staticinvoke <org.apache.commons.lang3.text.WordUtils: boolean isDelimiter(char,char[])>(ch, delimiters);

    if $stack10 == 0 goto label6;
    uncapitalizeNext = 1;

    goto label7;

  label6:
    if uncapitalizeNext == 0 goto label7;
    $stack13 = staticinvoke <java.lang.Character: char toLowerCase(char)>(ch);
    buffer[i] = $stack13;
    uncapitalizeNext = 0;

  label7:
    i = i + 1;

    goto label5;

  label8:
    $stack9 = new java.lang.String;
    specialinvoke $stack9.<java.lang.String: void <init>(char[])>(buffer);

    return $stack9;
}
","```java
package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the WordUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class WordUtilsTest {

    private WordUtils wordUtils;

    @BeforeEach
    void setUp() {
        wordUtils = new WordUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test uncapitalizing a string without delimiters"")
    void testUncapitalizeNoDelimiters() {
        assertEquals(""teststring"", wordUtils.uncapitalize(""TestString"", new char[]{}));
        assertEquals(""test string"", wordUtils.uncapitalize(""Test String"", new char[]{}));
    }

    @Test
    @DisplayName(""Test uncapitalizing a string with space as a delimiter"")
    void testUncapitalizeWithSpaceDelimiter() {
        assertEquals(""test string"", wordUtils.uncapitalize(""Test String"", new char[]{' '}));
        assertEquals(""multiple words here"", wordUtils.uncapitalize(""Multiple Words Here"", new char[]{' '}));
    }

    @Test
    @DisplayName(""Test uncapitalizing a string with mixed-case and delimiters"")
    void testUncapitalizeMixedCaseWithDelimiters() {
        assertEquals(""one two three"", wordUtils.uncapitalize(""One Two Three"", new char[]{' '}));
        assertEquals(""java code"", wordUtils.uncapitalize(""Java Code"", new char[]{' '}));
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test uncapitalizing null string"")
    void testUncapitalizeNullString() {
        assertEquals(null, wordUtils.uncapitalize(null, new char[]{' '}));
    }

    @Test
    @DisplayName(""Test uncapitalizing empty string"")
    void testUncapitalizeEmptyString() {
        assertEquals("""", wordUtils.uncapitalize("""", new char[]{' '}));
    }

    @Test
    @DisplayName(""Test uncapitalizing string with complex delimiters"")
    void testUncapitalizeComplexDelimiters() {
        assertEquals(""hello.world-and,more"", wordUtils.uncapitalize(""Hello.World-And,More"", new char[]{'.', '-', ','}));
    }

    @Test
    @DisplayName(""Test uncapitalizing with null delimiters"")
    void testUncapitalizeWithNullDelimiters() {
        assertEquals(""teststring"", wordUtils.uncapitalize(""TestString"", null));
    }

    @Test
    @DisplayName(""Test uncapitalizing with special character delimiters"")
    void testUncapitalizeWithSpecialCharacterDelimiters() {
        assertEquals(""hello-world!"", wordUtils.uncapitalize(""Hello-World!"", new char[]{'-', '!'}));
    }

    // CORNER CASES

    @Test
    @DisplayName(""Test uncapitalizing string without delimiters affecting logic"")
    void testUncapitalizeWithoutEffectDelimiters() {
        assertEquals(""noeffect"", wordUtils.uncapitalize(""NoEffect"", new char[]{',', '.'}));
    }

    @Test
    @DisplayName(""Test string uncapitalization behavior at buffer conditions"")
    void testUncapitalizeBufferConditions() {
        assertEquals(""hello buffer"", wordUtils.uncapitalize(""Hello Buffer"", new char[]{' '}));
    }

    @Test
    @DisplayName(""Test uncapitalizing string with continuous delimiters"")
    void testUncapitalizeContinuousDelimiters() {
        assertEquals(""a-b-c"", wordUtils.uncapitalize(""A-B-C"", new char[]{'-'}));
    }
}
```","package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the WordUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class WordUtilsTest {

    private WordUtils wordUtils;

    @BeforeEach
    void setUp() {
        wordUtils = new WordUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test uncapitalizing a string without delimiters"")
    void testUncapitalizeNoDelimiters() {
        assertEquals(""teststring"", wordUtils.uncapitalize(""TestString"", new char[]{}));
        assertEquals(""test string"", wordUtils.uncapitalize(""Test String"", new char[]{}));
    }

    @Test
    @DisplayName(""Test uncapitalizing a string with space as a delimiter"")
    void testUncapitalizeWithSpaceDelimiter() {
        assertEquals(""test string"", wordUtils.uncapitalize(""Test String"", new char[]{' '}));
        assertEquals(""multiple words here"", wordUtils.uncapitalize(""Multiple Words Here"", new char[]{' '}));
    }

    @Test
    @DisplayName(""Test uncapitalizing a string with mixed-case and delimiters"")
    void testUncapitalizeMixedCaseWithDelimiters() {
        assertEquals(""one two three"", wordUtils.uncapitalize(""One Two Three"", new char[]{' '}));
        assertEquals(""java code"", wordUtils.uncapitalize(""Java Code"", new char[]{' '}));
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test uncapitalizing null string"")
    void testUncapitalizeNullString() {
        assertEquals(null, wordUtils.uncapitalize(null, new char[]{' '}));
    }

    @Test
    @DisplayName(""Test uncapitalizing empty string"")
    void testUncapitalizeEmptyString() {
        assertEquals("""", wordUtils.uncapitalize("""", new char[]{' '}));
    }

    @Test
    @DisplayName(""Test uncapitalizing string with complex delimiters"")
    void testUncapitalizeComplexDelimiters() {
        assertEquals(""hello.world-and,more"", wordUtils.uncapitalize(""Hello.World-And,More"", new char[]{'.', '-', ','}));
    }

    @Test
    @DisplayName(""Test uncapitalizing with null delimiters"")
    void testUncapitalizeWithNullDelimiters() {
        assertEquals(""teststring"", wordUtils.uncapitalize(""TestString"", null));
    }

    @Test
    @DisplayName(""Test uncapitalizing with special character delimiters"")
    void testUncapitalizeWithSpecialCharacterDelimiters() {
        assertEquals(""hello-world!"", wordUtils.uncapitalize(""Hello-World!"", new char[]{'-', '!'}));
    }

    // CORNER CASES

    @Test
    @DisplayName(""Test uncapitalizing string without delimiters affecting logic"")
    void testUncapitalizeWithoutEffectDelimiters() {
        assertEquals(""noeffect"", wordUtils.uncapitalize(""NoEffect"", new char[]{',', '.'}));
    }

    @Test
    @DisplayName(""Test string uncapitalization behavior at buffer conditions"")
    void testUncapitalizeBufferConditions() {
        assertEquals(""hello buffer"", wordUtils.uncapitalize(""Hello Buffer"", new char[]{' '}));
    }

    @Test
    @DisplayName(""Test uncapitalizing string with continuous delimiters"")
    void testUncapitalizeContinuousDelimiters() {
        assertEquals(""a-b-c"", wordUtils.uncapitalize(""A-B-C"", new char[]{'-'}));
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/WordUtilsTest.java"
"org.apache.commons.lang3.text.WordUtils.initials(java.lang.String, char[])","java.lang.String initials(java.lang.String, char[])","{
    char[] delimiters;
    java.lang.String str;
    unknown $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25, $stack8, $stack9, buf, ch, count, i, lastWasGap, strLen;


    str := @parameter0: java.lang.String;
    delimiters := @parameter1: char[];
    $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(str);

    if $stack8 == 0 goto label1;

    return str;

  label1:
    if delimiters == null goto label2;
    $stack16 = lengthof delimiters;

    if $stack16 != 0 goto label2;

    return """";

  label2:
    $stack17 = str;
    $stack18 = virtualinvoke str.<java.lang.String: int length()>();
    $stack20 = strLen;
    $stack19 = 2;
    $stack9 = $stack20 / $stack19;
    $stack21 = 1;
    $stack10 = $stack9 + $stack21;
    $stack22 = newarray (char)[$stack10];
    $stack23 = 0;
    count = $stack23;
    $stack24 = 1;
    lastWasGap = $stack24;
    $stack25 = 0;
    i = $stack25;

  label3:
    $stack14 = i;
    $stack13 = strLen;

    if $stack14 >= $stack13 goto label6;
    ch = virtualinvoke str.<java.lang.String: char charAt(int)>(i);
    $stack12 = staticinvoke <org.apache.commons.lang3.text.WordUtils: boolean isDelimiter(char,char[])>(ch, delimiters);

    if $stack12 == 0 goto label4;
    lastWasGap = 1;

    goto label5;

  label4:
    if lastWasGap == 0 goto label5;
    $stack15 = count;
    count = count + 1;
    buf[$stack15] = ch;
    lastWasGap = 0;

  label5:
    i = i + 1;

    goto label3;

  label6:
    $stack11 = new java.lang.String;
    specialinvoke $stack11.<java.lang.String: void <init>(char[],int,int)>(buf, 0, count);

    return $stack11;
}
","```java
package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the WordUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class WordUtilsTest {

    private WordUtils wordUtils;

    @BeforeEach
    void setUp() {
        wordUtils = new WordUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test initials with standard delimiters"")
    void testInitialsStandardDelimiters() {
        assertEquals(""JSD"", wordUtils.initials(""John Smith Doe"", new char[] {' '}));
        assertEquals(""JS"", wordUtils.initials(""John Smith"", new char[] {' '}));
    }

    @Test
    @DisplayName(""Test initials with non-standard delimiters"")
    void testInitialsNonStandardDelimiters() {
        assertEquals(""JSD"", wordUtils.initials(""John.Smith.Doe"", new char[] {'.'}));
        assertEquals(""JS"", wordUtils.initials(""John-Smith"", new char[] {'-'}));
    }

    @Test
    @DisplayName(""Test initials with mixed delimiters"")
    void testInitialsMixedDelimiters() {
        assertEquals(""JSD"", wordUtils.initials(""John-Smith Doe"", new char[] {'-', ' '}));
        assertEquals(""JS"", wordUtils.initials(""John.Smith"", new char[] {'.', ' '}));
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test initials with empty string"")
    void testInitialsEmptyString() {
        assertEquals("""", wordUtils.initials("""", new char[] {' '}));
    }

    @Test
    @DisplayName(""Test initials with null string"")
    void testInitialsNullString() {
        assertNull(wordUtils.initials(null, new char[] {' '}));
    }

    @Test
    @DisplayName(""Test initials with single character"")
    void testInitialsSingleCharacter() {
        assertEquals(""A"", wordUtils.initials(""A"", new char[] {' '}));
    }

    @Test
    @DisplayName(""Test initials with single word"")
    void testInitialsSingleWord() {
        assertEquals(""J"", wordUtils.initials(""John"", new char[] {' '}));
    }

    // EDGE CASES (DELIMITERS)

    @Test
    @DisplayName(""Test initials with null delimiters"")
    void testInitialsNullDelimiters() {
        assertEquals("""", wordUtils.initials(""John Smith"", null));
    }

    @Test
    @DisplayName(""Test initials with empty delimiters"")
    void testInitialsEmptyDelimiters() {
        assertEquals("""", wordUtils.initials(""John Smith"", new char[] {}));
    }

    // CORNER CASES

    @Test
    @DisplayName(""Test initials with multiple words, no delimiters"")
    void testInitialsNoDelimiters() {
        assertEquals("""", wordUtils.initials(""JohnSmithDoe"", new char[] {}));
    }

    @Test
    @DisplayName(""Test initials with consecutive delimiters"")
    void testInitialsConsecutiveDelimiters() {
        assertEquals(""JSD"", wordUtils.initials(""John  Smith  Doe"", new char[] {' '}));
    }

    @Test
    @DisplayName(""Test initials ignoring empty segments between delimiters"")
    void testInitialsIgnoringEmptySegments() {
        assertEquals(""JSD"", wordUtils.initials(""John..Smith..Doe"", new char[] {'.'}));
    }
}
```","package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the WordUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class WordUtilsTest {

    private WordUtils wordUtils;

    @BeforeEach
    void setUp() {
        wordUtils = new WordUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test initials with standard delimiters"")
    void testInitialsStandardDelimiters() {
        assertEquals(""JSD"", wordUtils.initials(""John Smith Doe"", new char[] {' '}));
        assertEquals(""JS"", wordUtils.initials(""John Smith"", new char[] {' '}));
    }

    @Test
    @DisplayName(""Test initials with non-standard delimiters"")
    void testInitialsNonStandardDelimiters() {
        assertEquals(""JSD"", wordUtils.initials(""John.Smith.Doe"", new char[] {'.'}));
        assertEquals(""JS"", wordUtils.initials(""John-Smith"", new char[] {'-'}));
    }

    @Test
    @DisplayName(""Test initials with mixed delimiters"")
    void testInitialsMixedDelimiters() {
        assertEquals(""JSD"", wordUtils.initials(""John-Smith Doe"", new char[] {'-', ' '}));
        assertEquals(""JS"", wordUtils.initials(""John.Smith"", new char[] {'.', ' '}));
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test initials with empty string"")
    void testInitialsEmptyString() {
        assertEquals("""", wordUtils.initials("""", new char[] {' '}));
    }

    @Test
    @DisplayName(""Test initials with null string"")
    void testInitialsNullString() {
        assertNull(wordUtils.initials(null, new char[] {' '}));
    }

    @Test
    @DisplayName(""Test initials with single character"")
    void testInitialsSingleCharacter() {
        assertEquals(""A"", wordUtils.initials(""A"", new char[] {' '}));
    }

    @Test
    @DisplayName(""Test initials with single word"")
    void testInitialsSingleWord() {
        assertEquals(""J"", wordUtils.initials(""John"", new char[] {' '}));
    }

    // EDGE CASES (DELIMITERS)

    @Test
    @DisplayName(""Test initials with null delimiters"")
    void testInitialsNullDelimiters() {
        assertEquals("""", wordUtils.initials(""John Smith"", null));
    }

    @Test
    @DisplayName(""Test initials with empty delimiters"")
    void testInitialsEmptyDelimiters() {
        assertEquals("""", wordUtils.initials(""John Smith"", new char[] {}));
    }

    // CORNER CASES

    @Test
    @DisplayName(""Test initials with multiple words, no delimiters"")
    void testInitialsNoDelimiters() {
        assertEquals("""", wordUtils.initials(""JohnSmithDoe"", new char[] {}));
    }

    @Test
    @DisplayName(""Test initials with consecutive delimiters"")
    void testInitialsConsecutiveDelimiters() {
        assertEquals(""JSD"", wordUtils.initials(""John  Smith  Doe"", new char[] {' '}));
    }

    @Test
    @DisplayName(""Test initials ignoring empty segments between delimiters"")
    void testInitialsIgnoringEmptySegments() {
        assertEquals(""JSD"", wordUtils.initials(""John..Smith..Doe"", new char[] {'.'}));
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/WordUtilsTest.java"
"org.apache.commons.lang3.text.WordUtils.initials(java.lang.String)","java.lang.String initials(java.lang.String)","{
    java.lang.String str;
    unknown $stack1;


    str := @parameter0: java.lang.String;
    $stack1 = staticinvoke <org.apache.commons.lang3.text.WordUtils: java.lang.String initials(java.lang.String,char[])>(str, null);

    return $stack1;
}
","```java
package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the WordUtils class.
 * Covers typical cases, edge cases, and error handling for the initials method.
 */
class WordUtilsTest {

    private WordUtils wordUtils;

    @BeforeEach
    void setUp() {
        wordUtils = new WordUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test initials with multiple words"")
    void testInitialsMultipleWords() {
        String input = ""John Doe"";
        assertEquals(""JD"", wordUtils.initials(input), ""Initials should be 'JD' for 'John Doe'"");
    }

    @Test
    @DisplayName(""Test initials with a single word"")
    void testInitialsSingleWord() {
        String input = ""Alice"";
        assertEquals(""A"", wordUtils.initials(input), ""Initials should be 'A' for 'Alice'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test initials with empty string"")
    void testInitialsEmptyString() {
        String input = """";
        assertEquals("""", wordUtils.initials(input), ""Initials should be an empty string for empty input"");
    }

    @Test
    @DisplayName(""Test initials with a null string"")
    void testInitialsNullString() {
        String input = null;
        assertNull(wordUtils.initials(input), ""Initials should be null for null input"");
    }

    @Test
    @DisplayName(""Test initials with multiple spaces between words"")
    void testInitialsWithMultipleSpaces() {
        String input = ""John    Doe"";
        assertEquals(""JD"", wordUtils.initials(input), ""Initials should be 'JD' for 'John    Doe'"");
    }

    @Test
    @DisplayName(""Test initials with leading and trailing spaces"")
    void testInitialsWithLeadingAndTrailingSpaces() {
        String input = ""   John Doe   "";
        assertEquals(""JD"", wordUtils.initials(input), ""Initials should be 'JD' for '   John Doe   '"");
    }

    @Test
    @DisplayName(""Test initials with special characters"")
    void testInitialsWithSpecialCharacters() {
        String input = ""Alice-Bob"";
        assertEquals(""A"", wordUtils.initials(input), ""Initials should be 'A' for 'Alice-Bob'"");
    }

    @Test
    @DisplayName(""Test initials with numbers and words"")
    void testInitialsWithNumbersAndWords() {
        String input = ""User 123"";
        assertEquals(""U"", wordUtils.initials(input), ""Initials should be 'U' for 'User 123'"");
    }

    @Test
    @DisplayName(""Test initials with hyphenated names"")
    void testInitialsHyphenatedNames() {
        String input = ""Mary-Jane Watson"";
        assertEquals(""MW"", wordUtils.initials(input), ""Initials should be 'MW' for 'Mary-Jane Watson'"");
    }
}
```","package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the WordUtils class.
 * Covers typical cases, edge cases, and error handling for the initials method.
 */
class WordUtilsTest {

    private WordUtils wordUtils;

    @BeforeEach
    void setUp() {
        wordUtils = new WordUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test initials with multiple words"")
    void testInitialsMultipleWords() {
        String input = ""John Doe"";
        assertEquals(""JD"", wordUtils.initials(input), ""Initials should be 'JD' for 'John Doe'"");
    }

    @Test
    @DisplayName(""Test initials with a single word"")
    void testInitialsSingleWord() {
        String input = ""Alice"";
        assertEquals(""A"", wordUtils.initials(input), ""Initials should be 'A' for 'Alice'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test initials with empty string"")
    void testInitialsEmptyString() {
        String input = """";
        assertEquals("""", wordUtils.initials(input), ""Initials should be an empty string for empty input"");
    }

    @Test
    @DisplayName(""Test initials with a null string"")
    void testInitialsNullString() {
        String input = null;
        assertNull(wordUtils.initials(input), ""Initials should be null for null input"");
    }

    @Test
    @DisplayName(""Test initials with multiple spaces between words"")
    void testInitialsWithMultipleSpaces() {
        String input = ""John    Doe"";
        assertEquals(""JD"", wordUtils.initials(input), ""Initials should be 'JD' for 'John    Doe'"");
    }

    @Test
    @DisplayName(""Test initials with leading and trailing spaces"")
    void testInitialsWithLeadingAndTrailingSpaces() {
        String input = ""   John Doe   "";
        assertEquals(""JD"", wordUtils.initials(input), ""Initials should be 'JD' for '   John Doe   '"");
    }

    @Test
    @DisplayName(""Test initials with special characters"")
    void testInitialsWithSpecialCharacters() {
        String input = ""Alice-Bob"";
        assertEquals(""A"", wordUtils.initials(input), ""Initials should be 'A' for 'Alice-Bob'"");
    }

    @Test
    @DisplayName(""Test initials with numbers and words"")
    void testInitialsWithNumbersAndWords() {
        String input = ""User 123"";
        assertEquals(""U"", wordUtils.initials(input), ""Initials should be 'U' for 'User 123'"");
    }

    @Test
    @DisplayName(""Test initials with hyphenated names"")
    void testInitialsHyphenatedNames() {
        String input = ""Mary-Jane Watson"";
        assertEquals(""MW"", wordUtils.initials(input), ""Initials should be 'MW' for 'Mary-Jane Watson'"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/WordUtilsTest.java"
"org.apache.commons.lang3.text.WordUtils.isDelimiter(char, char[])","boolean isDelimiter(char, char[])","{
    char ch;
    char[] delimiters;
    unknown $stack6, $stack7, $stack8, delimiter, l2, l3, l4;


    ch := @parameter0: char;
    delimiters := @parameter1: char[];

    if delimiters != null goto label1;
    $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch);

    return $stack8;

  label1:
    l2 = delimiters;
    l3 = lengthof l2;
    l4 = 0;

  label2:
    $stack7 = l4;
    $stack6 = l3;

    if $stack7 >= $stack6 goto label4;
    delimiter = l2[l4];

    if ch != delimiter goto label3;

    return 1;

  label3:
    l4 = l4 + 1;

    goto label2;

  label4:
    return 0;
}
","```java
package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the WordUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class WordUtilsTest {

    private WordUtils wordUtils;

    @BeforeEach
    void setUp() {
        wordUtils = new WordUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test isDelimiter with whitespace when delimiters are null"")
    void testIsDelimiterWhitespaceWithNullDelimiters() {
        assertTrue(wordUtils.isDelimiter(' ', null), ""Space should be treated as delimiter when delimiters are null"");
        assertTrue(wordUtils.isDelimiter('\n', null), ""Newline should be treated as delimiter when delimiters are null"");
    }

    @Test
    @DisplayName(""Test isDelimiter with character present in delimiters"")
    void testIsDelimiterCharacterPresent() {
        char[] delimiters = {',', ';', '.'};
        assertTrue(wordUtils.isDelimiter(',', delimiters), ""Comma should be a delimiter when it's in the list"");
        assertTrue(wordUtils.isDelimiter(';', delimiters), ""Semicolon should be a delimiter when it's in the list"");
    }

    @Test
    @DisplayName(""Test isDelimiter with character not present in delimiters"")
    void testIsDelimiterCharacterNotPresent() {
        char[] delimiters = {',', ';', '.'};
        assertFalse(wordUtils.isDelimiter('a', delimiters), ""Character 'a' should not be a delimiter when it's not in the list"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test isDelimiter with empty delimiters array"")
    void testIsDelimiterWithEmptyArray() {
        char[] delimiters = {};
        assertFalse(wordUtils.isDelimiter('a', delimiters), ""Character 'a' should not be a delimiter with an empty array"");
    }

    @Test
    @DisplayName(""Test isDelimiter with null character and non-empty delimiters"")
    void testIsDelimiterNullCharacter() {
        char[] delimiters = {',', ';', '.'};
        assertFalse(wordUtils.isDelimiter('\0', delimiters), ""Null character should not be a delimiter unless explicitly listed"");
    }

    @Test
    @DisplayName(""Test isDelimiter with lone delimiter character"")
    void testIsDelimiterWithSingleDelimiter() {
        char[] delimiters = {','};
        assertTrue(wordUtils.isDelimiter(',', delimiters), ""Comma should be recognized as a delimiter when it is the only one"");
        assertFalse(wordUtils.isDelimiter('.', delimiters), ""Period should not be a delimiter when it's not in the list"");
    }

    // ERROR CASES

    @Test
    @DisplayName(""Test isDelimiter with character and no delimiters (null array)"")
    void testIsDelimiterCharacterNoDelimiters() {
        assertTrue(wordUtils.isDelimiter(' ', null), ""Space should be a default delimiter when delimiters are null"");
        assertFalse(wordUtils.isDelimiter('a', null), ""Non-whitespace character should not be a default delimiter when delimiters are null"");
    }
}
```","package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the WordUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class WordUtilsTest {

    private WordUtils wordUtils;

    @BeforeEach
    void setUp() {
        wordUtils = new WordUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test isDelimiter with whitespace when delimiters are null"")
    void testIsDelimiterWhitespaceWithNullDelimiters() {
        assertTrue(wordUtils.isDelimiter(' ', null), ""Space should be treated as delimiter when delimiters are null"");
        assertTrue(wordUtils.isDelimiter('\n', null), ""Newline should be treated as delimiter when delimiters are null"");
    }

    @Test
    @DisplayName(""Test isDelimiter with character present in delimiters"")
    void testIsDelimiterCharacterPresent() {
        char[] delimiters = {',', ';', '.'};
        assertTrue(wordUtils.isDelimiter(',', delimiters), ""Comma should be a delimiter when it's in the list"");
        assertTrue(wordUtils.isDelimiter(';', delimiters), ""Semicolon should be a delimiter when it's in the list"");
    }

    @Test
    @DisplayName(""Test isDelimiter with character not present in delimiters"")
    void testIsDelimiterCharacterNotPresent() {
        char[] delimiters = {',', ';', '.'};
        assertFalse(wordUtils.isDelimiter('a', delimiters), ""Character 'a' should not be a delimiter when it's not in the list"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test isDelimiter with empty delimiters array"")
    void testIsDelimiterWithEmptyArray() {
        char[] delimiters = {};
        assertFalse(wordUtils.isDelimiter('a', delimiters), ""Character 'a' should not be a delimiter with an empty array"");
    }

    @Test
    @DisplayName(""Test isDelimiter with null character and non-empty delimiters"")
    void testIsDelimiterNullCharacter() {
        char[] delimiters = {',', ';', '.'};
        assertFalse(wordUtils.isDelimiter('\0', delimiters), ""Null character should not be a delimiter unless explicitly listed"");
    }

    @Test
    @DisplayName(""Test isDelimiter with lone delimiter character"")
    void testIsDelimiterWithSingleDelimiter() {
        char[] delimiters = {','};
        assertTrue(wordUtils.isDelimiter(',', delimiters), ""Comma should be recognized as a delimiter when it is the only one"");
        assertFalse(wordUtils.isDelimiter('.', delimiters), ""Period should not be a delimiter when it's not in the list"");
    }

    // ERROR CASES

    @Test
    @DisplayName(""Test isDelimiter with character and no delimiters (null array)"")
    void testIsDelimiterCharacterNoDelimiters() {
        assertTrue(wordUtils.isDelimiter(' ', null), ""Space should be a default delimiter when delimiters are null"");
        assertFalse(wordUtils.isDelimiter('a', null), ""Non-whitespace character should not be a default delimiter when delimiters are null"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/WordUtilsTest.java"
"org.apache.commons.lang3.text.WordUtils.wrap(java.lang.String, int)","java.lang.String wrap(java.lang.String, int)","{
    int wrapLength;
    java.lang.String str;
    unknown $stack2;


    str := @parameter0: java.lang.String;
    wrapLength := @parameter1: int;
    $stack2 = staticinvoke <org.apache.commons.lang3.text.WordUtils: java.lang.String wrap(java.lang.String,int,java.lang.String,boolean)>(str, wrapLength, null, 0);

    return $stack2;
}
","```java
package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the WordUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class WordUtilsTest {

    private WordUtils wordUtils;

    @BeforeEach
    void setUp() {
        wordUtils = new WordUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test wrapping a simple sentence with sufficient wrap length"")
    void testWrapSimpleSentence() {
        String str = ""This is a simple sentence."";
        int wrapLength = 10;
        assertEquals(""This is a\nsimple\nsentence."", wordUtils.wrap(str, wrapLength), ""Should wrap the sentence into lines of length <= 10"");
    }

    @Test
    @DisplayName(""Test wrapping a sentence with exact wrap length lines"")
    void testWrapExactLength() {
        String str = ""1234567890 1234567890 1234567890"";
        int wrapLength = 10;
        assertEquals(""1234567890\n1234567890\n1234567890"", wordUtils.wrap(str, wrapLength), ""Should wrap into perfect lines of length 10"");
    }

    @Test
    @DisplayName(""Test wrapping a sentence with wrap length longer than sentence"")
    void testWrapLongerThanSentence() {
        String str = ""Short sentence."";
        int wrapLength = 50;
        assertEquals(""Short sentence."", wordUtils.wrap(str, wrapLength), ""Should return the sentence unchanged"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test wrapping a sentence with zero wrap length"")
    void testWrapWithZeroLength() {
        String str = ""This sentence."";
        int wrapLength = 0;
        assertThrows(IllegalArgumentException.class, () -> wordUtils.wrap(str, wrapLength), ""Should throw IllegalArgumentException for zero wrap length"");
    }

    @Test
    @DisplayName(""Test wrapping an empty string"")
    void testWrapEmptyString() {
        String str = """";
        int wrapLength = 10;
        assertEquals("""", wordUtils.wrap(str, wrapLength), ""Wrapping an empty string should return empty string"");
    }

    @Test
    @DisplayName(""Test wrapping a null string"")
    void testWrapNullString() {
        String str = null;
        int wrapLength = 10;
        assertThrows(NullPointerException.class, () -> wordUtils.wrap(str, wrapLength), ""Should throw NullPointerException for null string"");
    }

    // EDGE CASES (String Content)

    @Test
    @DisplayName(""Test wrapping a string with only spaces"")
    void testWrapSpacesOnly() {
        String str = ""          "";
        int wrapLength = 5;
        assertEquals(""\n     "", wordUtils.wrap(str, wrapLength), ""Should wrap spaces into lines"");
    }

    @Test
    @DisplayName(""Test wrapping a very long word that exceeds wrap length"")
    void testWrapLongWord() {
        String str = ""Supercalifragilisticexpialidocious"";
        int wrapLength = 5;
        assertEquals(""Supercalifragilisticexpialidocious"", wordUtils.wrap(str, wrapLength), ""Long words should not be broken"");
    }

    @Test
    @DisplayName(""Test wrapping multiple spaces within words"")
    void testWrapWithMultipleSpaces() {
        String str = ""Multiple   spaces   between   words"";
        int wrapLength = 10;
        assertEquals(""Multiple\nspaces\nbetween\nwords"", wordUtils.wrap(str, wrapLength), ""Should manage multiple spaces"");
    }
}
```","package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the WordUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class WordUtilsTest {

    private WordUtils wordUtils;

    @BeforeEach
    void setUp() {
        wordUtils = new WordUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test wrapping a simple sentence with sufficient wrap length"")
    void testWrapSimpleSentence() {
        String str = ""This is a simple sentence."";
        int wrapLength = 10;
        assertEquals(""This is a\nsimple\nsentence."", wordUtils.wrap(str, wrapLength), ""Should wrap the sentence into lines of length <= 10"");
    }

    @Test
    @DisplayName(""Test wrapping a sentence with exact wrap length lines"")
    void testWrapExactLength() {
        String str = ""1234567890 1234567890 1234567890"";
        int wrapLength = 10;
        assertEquals(""1234567890\n1234567890\n1234567890"", wordUtils.wrap(str, wrapLength), ""Should wrap into perfect lines of length 10"");
    }

    @Test
    @DisplayName(""Test wrapping a sentence with wrap length longer than sentence"")
    void testWrapLongerThanSentence() {
        String str = ""Short sentence."";
        int wrapLength = 50;
        assertEquals(""Short sentence."", wordUtils.wrap(str, wrapLength), ""Should return the sentence unchanged"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test wrapping a sentence with zero wrap length"")
    void testWrapWithZeroLength() {
        String str = ""This sentence."";
        int wrapLength = 0;
        assertThrows(IllegalArgumentException.class, () -> wordUtils.wrap(str, wrapLength), ""Should throw IllegalArgumentException for zero wrap length"");
    }

    @Test
    @DisplayName(""Test wrapping an empty string"")
    void testWrapEmptyString() {
        String str = """";
        int wrapLength = 10;
        assertEquals("""", wordUtils.wrap(str, wrapLength), ""Wrapping an empty string should return empty string"");
    }

    @Test
    @DisplayName(""Test wrapping a null string"")
    void testWrapNullString() {
        String str = null;
        int wrapLength = 10;
        assertThrows(NullPointerException.class, () -> wordUtils.wrap(str, wrapLength), ""Should throw NullPointerException for null string"");
    }

    // EDGE CASES (String Content)

    @Test
    @DisplayName(""Test wrapping a string with only spaces"")
    void testWrapSpacesOnly() {
        String str = ""          "";
        int wrapLength = 5;
        assertEquals(""\n     "", wordUtils.wrap(str, wrapLength), ""Should wrap spaces into lines"");
    }

    @Test
    @DisplayName(""Test wrapping a very long word that exceeds wrap length"")
    void testWrapLongWord() {
        String str = ""Supercalifragilisticexpialidocious"";
        int wrapLength = 5;
        assertEquals(""Supercalifragilisticexpialidocious"", wordUtils.wrap(str, wrapLength), ""Long words should not be broken"");
    }

    @Test
    @DisplayName(""Test wrapping multiple spaces within words"")
    void testWrapWithMultipleSpaces() {
        String str = ""Multiple   spaces   between   words"";
        int wrapLength = 10;
        assertEquals(""Multiple\nspaces\nbetween\nwords"", wordUtils.wrap(str, wrapLength), ""Should manage multiple spaces"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/WordUtilsTest.java"
"org.apache.commons.lang3.text.WordUtils.capitalizeFully(java.lang.String)","java.lang.String capitalizeFully(java.lang.String)","{
    java.lang.String str;
    unknown $stack1;


    str := @parameter0: java.lang.String;
    $stack1 = staticinvoke <org.apache.commons.lang3.text.WordUtils: java.lang.String capitalizeFully(java.lang.String,char[])>(str, null);

    return $stack1;
}
","```java
package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the WordUtils class.
 * Covers typical cases, edge cases, and error handling for capitalizeFully method.
 */
class WordUtilsTest {

    @BeforeEach
    void setUp() {
        // Initialization if needed
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test capitalizing a simple sentence"")
    void testCapitalizeSimpleSentence() {
        assertEquals(""Hello World"", WordUtils.capitalizeFully(""hello world""));
        assertEquals(""Java Programming"", WordUtils.capitalizeFully(""java programming""));
    }

    @Test
    @DisplayName(""Test capitalizing a sentence with mixed casing"")
    void testCapitalizeMixedCasing() {
        assertEquals(""Hello World"", WordUtils.capitalizeFully(""hElLo WoRlD""));
        assertEquals(""Java Programming"", WordUtils.capitalizeFully(""JaVa PrOgRaMmInG""));
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test capitalizing an empty string"")
    void testCapitalizeEmptyString() {
        assertEquals("""", WordUtils.capitalizeFully(""""));
    }

    @Test
    @DisplayName(""Test capitalizing a string with a single word"")
    void testCapitalizeSingleWord() {
        assertEquals(""Word"", WordUtils.capitalizeFully(""word""));
        assertEquals(""Word"", WordUtils.capitalizeFully(""WORD""));
    }

    @Test
    @DisplayName(""Test capitalizing when already capitalized"")
    void testCapitalizeAlreadyCapitalized() {
        assertEquals(""Hello World"", WordUtils.capitalizeFully(""Hello World""));
        assertEquals(""Java Programming"", WordUtils.capitalizeFully(""Java Programming""));
    }

    // ERROR CASES

    @Test
    @DisplayName(""Test capitalizing a null string"")
    void testCapitalizeNullString() {
        assertThrows(NullPointerException.class, () -> {
            WordUtils.capitalizeFully(null);
        }, ""Should throw NullPointerException for null input"");
    }

    // CORNER CASES

    @Test
    @DisplayName(""Test capitalizing with numbers and punctuation"")
    void testCapitalizeWithNumbersAndPunctuation() {
        assertEquals(""123 Numbers And Symbols!"", WordUtils.capitalizeFully(""123 numbers and symbols!""));
        assertEquals(""Words-With-Dashes"", WordUtils.capitalizeFully(""words-with-dashes""));
    }

    @Test
    @DisplayName(""Test capitalizing with non-English characters"")
    void testCapitalizeNonEnglishCharacters() {
        assertEquals(""Árbol"", WordUtils.capitalizeFully(""árbol""));
        assertEquals(""Français"", WordUtils.capitalizeFully(""français""));
    }
}
```","package org.apache.commons.lang3.text;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the WordUtils class.
 * Covers typical cases, edge cases, and error handling for capitalizeFully method.
 */
class WordUtilsTest {

    @BeforeEach
    void setUp() {
        // Initialization if needed
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test capitalizing a simple sentence"")
    void testCapitalizeSimpleSentence() {
        assertEquals(""Hello World"", WordUtils.capitalizeFully(""hello world""));
        assertEquals(""Java Programming"", WordUtils.capitalizeFully(""java programming""));
    }

    @Test
    @DisplayName(""Test capitalizing a sentence with mixed casing"")
    void testCapitalizeMixedCasing() {
        assertEquals(""Hello World"", WordUtils.capitalizeFully(""hElLo WoRlD""));
        assertEquals(""Java Programming"", WordUtils.capitalizeFully(""JaVa PrOgRaMmInG""));
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test capitalizing an empty string"")
    void testCapitalizeEmptyString() {
        assertEquals("""", WordUtils.capitalizeFully(""""));
    }

    @Test
    @DisplayName(""Test capitalizing a string with a single word"")
    void testCapitalizeSingleWord() {
        assertEquals(""Word"", WordUtils.capitalizeFully(""word""));
        assertEquals(""Word"", WordUtils.capitalizeFully(""WORD""));
    }

    @Test
    @DisplayName(""Test capitalizing when already capitalized"")
    void testCapitalizeAlreadyCapitalized() {
        assertEquals(""Hello World"", WordUtils.capitalizeFully(""Hello World""));
        assertEquals(""Java Programming"", WordUtils.capitalizeFully(""Java Programming""));
    }

    // ERROR CASES

    @Test
    @DisplayName(""Test capitalizing a null string"")
    void testCapitalizeNullString() {
        assertThrows(NullPointerException.class, () -> {
            WordUtils.capitalizeFully(null);
        }, ""Should throw NullPointerException for null input"");
    }

    // CORNER CASES

    @Test
    @DisplayName(""Test capitalizing with numbers and punctuation"")
    void testCapitalizeWithNumbersAndPunctuation() {
        assertEquals(""123 Numbers And Symbols!"", WordUtils.capitalizeFully(""123 numbers and symbols!""));
        assertEquals(""Words-With-Dashes"", WordUtils.capitalizeFully(""words-with-dashes""));
    }

    @Test
    @DisplayName(""Test capitalizing with non-English characters"")
    void testCapitalizeNonEnglishCharacters() {
        assertEquals(""Árbol"", WordUtils.capitalizeFully(""árbol""));
        assertEquals(""Français"", WordUtils.capitalizeFully(""français""));
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/WordUtilsTest.java"
"org.apache.commons.lang3.CharSetUtils.modify(java.lang.String, java.lang.String[], boolean)","java.lang.String modify(java.lang.String, java.lang.String[], boolean)","{
    boolean expect;
    java.lang.String str;
    java.lang.String[] set;
    unknown $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack8, $stack9, buffer, chars, chrs, i, sz;


    str := @parameter0: java.lang.String;
    set := @parameter1: java.lang.String[];
    expect := @parameter2: boolean;
    chars = staticinvoke <org.apache.commons.lang3.CharSet: org.apache.commons.lang3.CharSet getInstance(java.lang.String[])>(set);
    $stack8 = new java.lang.StringBuilder;
    $stack9 = virtualinvoke str.<java.lang.String: int length()>();
    specialinvoke $stack8.<java.lang.StringBuilder: void <init>(int)>($stack9);
    buffer = $stack8;
    chrs = virtualinvoke str.<java.lang.String: char[] toCharArray()>();
    sz = lengthof chrs;
    i = 0;

  label1:
    $stack14 = i;
    $stack13 = sz;

    if $stack14 >= $stack13 goto label3;
    $stack11 = chrs[i];
    $stack12 = virtualinvoke chars.<org.apache.commons.lang3.CharSet: boolean contains(char)>($stack11);

    if $stack12 != expect goto label2;
    $stack15 = chrs[i];
    $stack16 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack15);

  label2:
    i = i + 1;

    goto label1;

  label3:
    $stack10 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>();

    return $stack10;
}
","```java
package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharSetUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class CharSetUtilsTest {

    private CharSetUtils charSetUtils;

    @BeforeEach
    void setUp() {
        charSetUtils = new CharSetUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test modifying a string with characters to include"")
    void testModifyIncludeChars() {
        String result = charSetUtils.modify(""hello world"", new String[]{""aeiou""}, true);
        assertEquals(""eoo"", result, ""Should include only vowels"");
    }

    @Test
    @DisplayName(""Test modifying a string with characters to exclude"")
    void testModifyExcludeChars() {
        String result = charSetUtils.modify(""hello world"", new String[]{""aeiou""}, false);
        assertEquals(""hll wrld"", result, ""Should exclude vowels"");
    }

    @Test
    @DisplayName(""Test modifying a string with multiple character sets"")
    void testModifyMultipleCharSets() {
        String result = charSetUtils.modify(""good morning"", new String[]{""aeiou"", ""g""}, false);
        assertEquals(""d mrnn"", result, ""Should exclude vowels and 'g'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test modifying an empty string"")
    void testModifyEmptyString() {
        String resultInclude = charSetUtils.modify("""", new String[]{""a""}, true);
        assertEquals("""", resultInclude, ""Modifying an empty string should return an empty string"");

        String resultExclude = charSetUtils.modify("""", new String[]{""a""}, false);
        assertEquals("""", resultExclude, ""Modifying an empty string should return an empty string"");
    }

    @Test
    @DisplayName(""Test modifying a string with no matching characters"")
    void testModifyNoMatchingChars() {
        String resultInclude = charSetUtils.modify(""xyz"", new String[]{""a""}, true);
        assertEquals("""", resultInclude, ""No matches should return an empty string when including"");

        String resultExclude = charSetUtils.modify(""xyz"", new String[]{""a""}, false);
        assertEquals(""xyz"", resultExclude, ""No matches should return original string when excluding"");
    }

    @Test
    @DisplayName(""Test modifying a string with all matching characters"")
    void testModifyAllMatchingChars() {
        String resultInclude = charSetUtils.modify(""aaa"", new String[]{""a""}, true);
        assertEquals(""aaa"", resultInclude, ""All matches should return the original string when including"");

        String resultExclude = charSetUtils.modify(""aaa"", new String[]{""a""}, false);
        assertEquals("""", resultExclude, ""All matches should return an empty string when excluding"");
    }
    
    @Test
    @DisplayName(""Test modifying a string with case sensitivity"")
    void testModifyCaseSensitive() {
        String result = charSetUtils.modify(""Hello"", new String[]{""h""}, false);
        assertEquals(""Hello"", result, ""Case-sensitive exclusion should leave 'Hello' unchanged"");

        String result2 = charSetUtils.modify(""Hello"", new String[]{""H""}, false);
        assertEquals(""ello"", result2, ""Case-sensitive exclusion should remove 'H'"");
    }

    // ERROR CASES

    @Test
    @DisplayName(""Test modifying a null string"")
    void testModifyNullString() {
        assertThrows(NullPointerException.class, () -> {
            charSetUtils.modify(null, new String[]{""a""}, true);
        }, ""Modifying a null string should throw NullPointerException"");
    }

    @Test
    @DisplayName(""Test modifying with a null character set"")
    void testModifyNullCharSet() {
        assertThrows(NullPointerException.class, () -> {
            charSetUtils.modify(""hello"", null, true);
        }, ""Modifying with a null character set should throw NullPointerException"");
    }

    @Test
    @DisplayName(""Test modifying with an empty character set array"")
    void testModifyEmptyCharSetArray() {
        String resultInclude = charSetUtils.modify(""hello"", new String[]{}, true);
        assertEquals("""", resultInclude, ""Empty charset array should result in an empty string when including"");

        String resultExclude = charSetUtils.modify(""hello"", new String[]{}, false);
        assertEquals(""hello"", resultExclude, ""Empty charset array should return original string when excluding"");
    }
}
```","package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharSetUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class CharSetUtilsTest {

    private CharSetUtils charSetUtils;

    @BeforeEach
    void setUp() {
        charSetUtils = new CharSetUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test modifying a string with characters to include"")
    void testModifyIncludeChars() {
        String result = charSetUtils.modify(""hello world"", new String[]{""aeiou""}, true);
        assertEquals(""eoo"", result, ""Should include only vowels"");
    }

    @Test
    @DisplayName(""Test modifying a string with characters to exclude"")
    void testModifyExcludeChars() {
        String result = charSetUtils.modify(""hello world"", new String[]{""aeiou""}, false);
        assertEquals(""hll wrld"", result, ""Should exclude vowels"");
    }

    @Test
    @DisplayName(""Test modifying a string with multiple character sets"")
    void testModifyMultipleCharSets() {
        String result = charSetUtils.modify(""good morning"", new String[]{""aeiou"", ""g""}, false);
        assertEquals(""d mrnn"", result, ""Should exclude vowels and 'g'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test modifying an empty string"")
    void testModifyEmptyString() {
        String resultInclude = charSetUtils.modify("""", new String[]{""a""}, true);
        assertEquals("""", resultInclude, ""Modifying an empty string should return an empty string"");

        String resultExclude = charSetUtils.modify("""", new String[]{""a""}, false);
        assertEquals("""", resultExclude, ""Modifying an empty string should return an empty string"");
    }

    @Test
    @DisplayName(""Test modifying a string with no matching characters"")
    void testModifyNoMatchingChars() {
        String resultInclude = charSetUtils.modify(""xyz"", new String[]{""a""}, true);
        assertEquals("""", resultInclude, ""No matches should return an empty string when including"");

        String resultExclude = charSetUtils.modify(""xyz"", new String[]{""a""}, false);
        assertEquals(""xyz"", resultExclude, ""No matches should return original string when excluding"");
    }

    @Test
    @DisplayName(""Test modifying a string with all matching characters"")
    void testModifyAllMatchingChars() {
        String resultInclude = charSetUtils.modify(""aaa"", new String[]{""a""}, true);
        assertEquals(""aaa"", resultInclude, ""All matches should return the original string when including"");

        String resultExclude = charSetUtils.modify(""aaa"", new String[]{""a""}, false);
        assertEquals("""", resultExclude, ""All matches should return an empty string when excluding"");
    }
    
    @Test
    @DisplayName(""Test modifying a string with case sensitivity"")
    void testModifyCaseSensitive() {
        String result = charSetUtils.modify(""Hello"", new String[]{""h""}, false);
        assertEquals(""Hello"", result, ""Case-sensitive exclusion should leave 'Hello' unchanged"");

        String result2 = charSetUtils.modify(""Hello"", new String[]{""H""}, false);
        assertEquals(""ello"", result2, ""Case-sensitive exclusion should remove 'H'"");
    }

    // ERROR CASES

    @Test
    @DisplayName(""Test modifying a null string"")
    void testModifyNullString() {
        assertThrows(NullPointerException.class, () -> {
            charSetUtils.modify(null, new String[]{""a""}, true);
        }, ""Modifying a null string should throw NullPointerException"");
    }

    @Test
    @DisplayName(""Test modifying with a null character set"")
    void testModifyNullCharSet() {
        assertThrows(NullPointerException.class, () -> {
            charSetUtils.modify(""hello"", null, true);
        }, ""Modifying with a null character set should throw NullPointerException"");
    }

    @Test
    @DisplayName(""Test modifying with an empty character set array"")
    void testModifyEmptyCharSetArray() {
        String resultInclude = charSetUtils.modify(""hello"", new String[]{}, true);
        assertEquals("""", resultInclude, ""Empty charset array should result in an empty string when including"");

        String resultExclude = charSetUtils.modify(""hello"", new String[]{}, false);
        assertEquals(""hello"", resultExclude, ""Empty charset array should return original string when excluding"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java"
"org.apache.commons.lang3.CharSetUtils.delete(java.lang.String, java.lang.String[])","java.lang.String delete(java.lang.String, java.lang.String[])","{
    java.lang.String str;
    java.lang.String[] set;
    unknown $stack2, $stack3, $stack4, $stack5;


    str := @parameter0: java.lang.String;
    set := @parameter1: java.lang.String[];
    $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(str);

    if $stack2 != 0 goto label1;
    $stack3 = staticinvoke <org.apache.commons.lang3.CharSetUtils: boolean deepEmpty(java.lang.String[])>(set);

    if $stack3 == 0 goto label2;

  label1:
    $stack5 = str;

    return $stack5;

  label2:
    $stack4 = staticinvoke <org.apache.commons.lang3.CharSetUtils: java.lang.String modify(java.lang.String,java.lang.String[],boolean)>(str, set, 0);

    return $stack4;
}
","```java
package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharSetUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class CharSetUtilsTest {

    private CharSetUtils charSetUtils;

    @BeforeEach
    void setUp() {
        charSetUtils = new CharSetUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test deleting characters existing in set"")
    void testDeleteCharactersExistingInSet() {
        String str = ""hello world"";
        String[] set = {""h"", ""e"", ""l""};
        assertEquals(""o word"", charSetUtils.delete(str, set), ""Should remove characters 'h', 'e', 'l'"");
    }

    @Test
    @DisplayName(""Test deleting characters not existing in set"")
    void testDeleteCharactersNotInSet() {
        String str = ""hello"";
        String[] set = {""x"", ""y"", ""z""};
        assertEquals(""hello"", charSetUtils.delete(str, set), ""Should not remove any characters since none exist in 'hello'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test deleting from empty string"")
    void testDeleteFromEmptyString() {
        String str = """";
        String[] set = {""a"", ""b""};
        assertEquals("""", charSetUtils.delete(str, set), ""Should return empty string when input is empty"");
    }

    @Test
    @DisplayName(""Test delete with empty set"")
    void testDeleteWithEmptySet() {
        String str = ""test string"";
        String[] set = {};
        assertEquals(""test string"", charSetUtils.delete(str, set), ""Should return original string with empty set"");
    }

    @Test
    @DisplayName(""Test delete with both string and set empty"")
    void testDeleteWithBothEmpty() {
        String str = """";
        String[] set = {};
        assertEquals("""", charSetUtils.delete(str, set), ""Should return empty when both string and set are empty"");
    }

    // SPECIAL CASES (null and special characters)

    @Test
    @DisplayName(""Test delete with null string"")
    void testDeleteWithNullString() {
        String str = null;
        String[] set = {""a"", ""b""};
        assertNull(charSetUtils.delete(str, set), ""Should return null when input string is null"");
    }

    @Test
    @DisplayName(""Test delete with null set"")
    void testDeleteWithNullSet() {
        String str = ""hello"";
        String[] set = null;
        assertEquals(""hello"", charSetUtils.delete(str, set), ""Should return original string when set is null"");
    }

    @Test
    @DisplayName(""Test delete with special characters"")
    void testDeleteWithSpecialCharacters() {
        String str = ""hello-world!"";
        String[] set = {""-"", ""!""};
        assertEquals(""helloworld"", charSetUtils.delete(str, set), ""Should remove special characters '-' and '!'"");
    }

    @Test
    @DisplayName(""Test delete with duplicate set entries"")
    void testDeleteWithDuplicateSetEntries() {
        String str = ""banana"";
        String[] set = {""a"", ""a"", ""a""};
        assertEquals(""bnn"", charSetUtils.delete(str, set), ""Should remove all 'a's regardless of duplicates in set"");
    }
}
```","package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharSetUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class CharSetUtilsTest {

    private CharSetUtils charSetUtils;

    @BeforeEach
    void setUp() {
        charSetUtils = new CharSetUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test deleting characters existing in set"")
    void testDeleteCharactersExistingInSet() {
        String str = ""hello world"";
        String[] set = {""h"", ""e"", ""l""};
        assertEquals(""o word"", charSetUtils.delete(str, set), ""Should remove characters 'h', 'e', 'l'"");
    }

    @Test
    @DisplayName(""Test deleting characters not existing in set"")
    void testDeleteCharactersNotInSet() {
        String str = ""hello"";
        String[] set = {""x"", ""y"", ""z""};
        assertEquals(""hello"", charSetUtils.delete(str, set), ""Should not remove any characters since none exist in 'hello'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test deleting from empty string"")
    void testDeleteFromEmptyString() {
        String str = """";
        String[] set = {""a"", ""b""};
        assertEquals("""", charSetUtils.delete(str, set), ""Should return empty string when input is empty"");
    }

    @Test
    @DisplayName(""Test delete with empty set"")
    void testDeleteWithEmptySet() {
        String str = ""test string"";
        String[] set = {};
        assertEquals(""test string"", charSetUtils.delete(str, set), ""Should return original string with empty set"");
    }

    @Test
    @DisplayName(""Test delete with both string and set empty"")
    void testDeleteWithBothEmpty() {
        String str = """";
        String[] set = {};
        assertEquals("""", charSetUtils.delete(str, set), ""Should return empty when both string and set are empty"");
    }

    // SPECIAL CASES (null and special characters)

    @Test
    @DisplayName(""Test delete with null string"")
    void testDeleteWithNullString() {
        String str = null;
        String[] set = {""a"", ""b""};
        assertNull(charSetUtils.delete(str, set), ""Should return null when input string is null"");
    }

    @Test
    @DisplayName(""Test delete with null set"")
    void testDeleteWithNullSet() {
        String str = ""hello"";
        String[] set = null;
        assertEquals(""hello"", charSetUtils.delete(str, set), ""Should return original string when set is null"");
    }

    @Test
    @DisplayName(""Test delete with special characters"")
    void testDeleteWithSpecialCharacters() {
        String str = ""hello-world!"";
        String[] set = {""-"", ""!""};
        assertEquals(""helloworld"", charSetUtils.delete(str, set), ""Should remove special characters '-' and '!'"");
    }

    @Test
    @DisplayName(""Test delete with duplicate set entries"")
    void testDeleteWithDuplicateSetEntries() {
        String str = ""banana"";
        String[] set = {""a"", ""a"", ""a""};
        assertEquals(""bnn"", charSetUtils.delete(str, set), ""Should remove all 'a's regardless of duplicates in set"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java"
"org.apache.commons.lang3.CharSetUtils.containsAny(java.lang.String, java.lang.String[])","boolean containsAny(java.lang.String, java.lang.String[])","{
    java.lang.String str;
    java.lang.String[] set;
    unknown $stack10, $stack11, $stack12, $stack7, $stack8, $stack9, c, chars, l3, l4, l5;


    str := @parameter0: java.lang.String;
    set := @parameter1: java.lang.String[];
    $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(str);

    if $stack7 != 0 goto label1;
    $stack8 = staticinvoke <org.apache.commons.lang3.CharSetUtils: boolean deepEmpty(java.lang.String[])>(set);

    if $stack8 == 0 goto label2;

  label1:
    $stack12 = 0;

    return $stack12;

  label2:
    chars = staticinvoke <org.apache.commons.lang3.CharSet: org.apache.commons.lang3.CharSet getInstance(java.lang.String[])>(set);
    l3 = virtualinvoke str.<java.lang.String: char[] toCharArray()>();
    l4 = lengthof l3;
    l5 = 0;

  label3:
    $stack11 = l5;
    $stack10 = l4;

    if $stack11 >= $stack10 goto label5;
    c = l3[l5];
    $stack9 = virtualinvoke chars.<org.apache.commons.lang3.CharSet: boolean contains(char)>(c);

    if $stack9 == 0 goto label4;

    return 1;

  label4:
    l5 = l5 + 1;

    goto label3;

  label5:
    return 0;
}
","```java
package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharSetUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class CharSetUtilsTest {

    private CharSetUtils charSetUtils;

    @BeforeEach
    void setUp() {
        charSetUtils = new CharSetUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test contains any character with typical string and charsets"")
    void testContainsAnyTypical() {
        assertTrue(charSetUtils.containsAny(""hello"", new String[]{""aeiou""}), ""Should contain vowels"");
        assertFalse(charSetUtils.containsAny(""test"", new String[]{""xyz""}), ""Should not contain any of 'xyz'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test contains any with empty string"")
    void testContainsAnyEmptyString() {
        assertFalse(charSetUtils.containsAny("""", new String[]{""aeiou""}), ""Empty string should not contain anything"");
    }

    @Test
    @DisplayName(""Test contains any with empty charset"")
    void testContainsAnyEmptyCharset() {
        assertFalse(charSetUtils.containsAny(""hello"", new String[]{}), ""Non-empty string with empty charset should not contain any character"");
    }

    @Test
    @DisplayName(""Test contains any with both empty string and charset"")
    void testContainsAnyBothEmpty() {
        assertFalse(charSetUtils.containsAny("""", new String[]{}), ""Empty string and empty charset should not contain any character"");
    }

    @Test
    @DisplayName(""Test contains any with single character"")
    void testContainsAnySingleCharacter() {
        assertTrue(charSetUtils.containsAny(""a"", new String[]{""a""}), ""Single character string should find a match"");
        assertFalse(charSetUtils.containsAny(""b"", new String[]{""a""}), ""Single character string should not find a different character"");
    }

    @Test
    @DisplayName(""Test contains any with overlapping character sets"")
    void testContainsAnyOverlappingSets() {
        assertTrue(charSetUtils.containsAny(""abcdef"", new String[]{""de"", ""xy""}), ""Should contain 'de'"");
        assertFalse(charSetUtils.containsAny(""abcdef"", new String[]{""xy"", ""yz""}), ""Should not contain 'xy', 'yz'"");
    }

    // ERROR CASES

    @Test
    @DisplayName(""Test contains any with null string"")
    void testContainsAnyNullString() {
        assertFalse(charSetUtils.containsAny(null, new String[]{""aeiou""}), ""Null string should not contain any character"");
    }

    @Test
    @DisplayName(""Test contains any with null charset"")
    void testContainsAnyNullCharset() {
        assertFalse(charSetUtils.containsAny(""hello"", null), ""Non-null string with null charset should not contain any character"");
    }

    @Test
    @DisplayName(""Test contains any with both null string and charset"")
    void testContainsAnyBothNull() {
        assertFalse(charSetUtils.containsAny(null, null), ""Null string and null charset should not contain any character"");
    }

    // SPECIAL CASES

    @Test
    @DisplayName(""Test contains any with identical string and charset"")
    void testContainsAnyIdenticalStringAndCharset() {
        assertTrue(charSetUtils.containsAny(""abc"", new String[]{""abc""}), ""Identical string and charset should contain characters"");
    }

    @Test
    @DisplayName(""Test contains any where charset is a superset of string"")
    void testContainsAnyCharsetSuperset() {
        assertTrue(charSetUtils.containsAny(""abc"", new String[]{""abcdef""}), ""Charset superset of string should contain string characters"");
    }
}
```","package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharSetUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class CharSetUtilsTest {

    private CharSetUtils charSetUtils;

    @BeforeEach
    void setUp() {
        charSetUtils = new CharSetUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test contains any character with typical string and charsets"")
    void testContainsAnyTypical() {
        assertTrue(charSetUtils.containsAny(""hello"", new String[]{""aeiou""}), ""Should contain vowels"");
        assertFalse(charSetUtils.containsAny(""test"", new String[]{""xyz""}), ""Should not contain any of 'xyz'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test contains any with empty string"")
    void testContainsAnyEmptyString() {
        assertFalse(charSetUtils.containsAny("""", new String[]{""aeiou""}), ""Empty string should not contain anything"");
    }

    @Test
    @DisplayName(""Test contains any with empty charset"")
    void testContainsAnyEmptyCharset() {
        assertFalse(charSetUtils.containsAny(""hello"", new String[]{}), ""Non-empty string with empty charset should not contain any character"");
    }

    @Test
    @DisplayName(""Test contains any with both empty string and charset"")
    void testContainsAnyBothEmpty() {
        assertFalse(charSetUtils.containsAny("""", new String[]{}), ""Empty string and empty charset should not contain any character"");
    }

    @Test
    @DisplayName(""Test contains any with single character"")
    void testContainsAnySingleCharacter() {
        assertTrue(charSetUtils.containsAny(""a"", new String[]{""a""}), ""Single character string should find a match"");
        assertFalse(charSetUtils.containsAny(""b"", new String[]{""a""}), ""Single character string should not find a different character"");
    }

    @Test
    @DisplayName(""Test contains any with overlapping character sets"")
    void testContainsAnyOverlappingSets() {
        assertTrue(charSetUtils.containsAny(""abcdef"", new String[]{""de"", ""xy""}), ""Should contain 'de'"");
        assertFalse(charSetUtils.containsAny(""abcdef"", new String[]{""xy"", ""yz""}), ""Should not contain 'xy', 'yz'"");
    }

    // ERROR CASES

    @Test
    @DisplayName(""Test contains any with null string"")
    void testContainsAnyNullString() {
        assertFalse(charSetUtils.containsAny(null, new String[]{""aeiou""}), ""Null string should not contain any character"");
    }

    @Test
    @DisplayName(""Test contains any with null charset"")
    void testContainsAnyNullCharset() {
        assertFalse(charSetUtils.containsAny(""hello"", null), ""Non-null string with null charset should not contain any character"");
    }

    @Test
    @DisplayName(""Test contains any with both null string and charset"")
    void testContainsAnyBothNull() {
        assertFalse(charSetUtils.containsAny(null, null), ""Null string and null charset should not contain any character"");
    }

    // SPECIAL CASES

    @Test
    @DisplayName(""Test contains any with identical string and charset"")
    void testContainsAnyIdenticalStringAndCharset() {
        assertTrue(charSetUtils.containsAny(""abc"", new String[]{""abc""}), ""Identical string and charset should contain characters"");
    }

    @Test
    @DisplayName(""Test contains any where charset is a superset of string"")
    void testContainsAnyCharsetSuperset() {
        assertTrue(charSetUtils.containsAny(""abc"", new String[]{""abcdef""}), ""Charset superset of string should contain string characters"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java"
"org.apache.commons.lang3.CharSetUtils.keep(java.lang.String, java.lang.String[])","java.lang.String keep(java.lang.String, java.lang.String[])","{
    java.lang.String str;
    java.lang.String[] set;
    unknown $stack2, $stack3, $stack4, $stack5;


    str := @parameter0: java.lang.String;
    set := @parameter1: java.lang.String[];

    if str != null goto label1;

    return null;

  label1:
    $stack2 = virtualinvoke str.<java.lang.String: boolean isEmpty()>();

    if $stack2 != 0 goto label2;
    $stack3 = staticinvoke <org.apache.commons.lang3.CharSetUtils: boolean deepEmpty(java.lang.String[])>(set);

    if $stack3 == 0 goto label3;

  label2:
    $stack5 = """";

    return $stack5;

  label3:
    $stack4 = staticinvoke <org.apache.commons.lang3.CharSetUtils: java.lang.String modify(java.lang.String,java.lang.String[],boolean)>(str, set, 1);

    return $stack4;
}
","```java
package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharSetUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class CharSetUtilsTest {

    private CharSetUtils charSetUtils;

    @BeforeEach
    void setUp() {
        charSetUtils = new CharSetUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test keeping specific characters in a string using a single set"")
    void testKeepSpecificChars() {
        String result = charSetUtils.keep(""hello world"", new String[]{""l""});
        assertEquals(""lll"", result, ""Result should be 'lll' keeping 'l' in 'hello world'"");
    }

    @Test
    @DisplayName(""Test keeping specific characters in a string using multiple sets"")
    void testKeepMultipleSets() {
        String result = charSetUtils.keep(""hello world"", new String[]{""l"", ""o""});
        assertEquals(""lloo"", result, ""Result should be 'lloo' keeping 'lo' in 'hello world'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test keeping characters when the target string is empty"")
    void testKeepEmptyString() {
        String result = charSetUtils.keep("""", new String[]{""a"", ""b""});
        assertEquals("""", result, ""Keeping any characters in an empty string should return an empty string"");
    }

    @Test
    @DisplayName(""Test keeping characters when set is empty"")
    void testKeepEmptySet() {
        String result = charSetUtils.keep(""hello"", new String[]{});
        assertEquals("""", result, ""Keeping with an empty set should return an empty string"");
    }

    // ERROR CASES

    @Test
    @DisplayName(""Test keeping characters when input string is null"")
    void testKeepNullString() {
        String result = charSetUtils.keep(null, new String[]{""a"", ""b""});
        assertNull(result, ""Keeping with a null string should return null"");
    }

    @Test
    @DisplayName(""Test keeping characters when set is null"")
    void testKeepNullSet() {
        String result = charSetUtils.keep(""hello"", null);
        assertEquals("""", result, ""Keeping with a null set should return an empty string"");
    }

    // CORNER CASES

    @Test
    @DisplayName(""Test keeping all characters"")
    void testKeepAllCharacters() {
        String result = charSetUtils.keep(""abcdef"", new String[]{""abcdef""});
        assertEquals(""abcdef"", result, ""Keeping all characters should return the original string"");
    }

    @Test
    @DisplayName(""Test keeping none of the characters"")
    void testKeepNoneOfCharacters() {
        String result = charSetUtils.keep(""abcdef"", new String[]{""xyz""});
        assertEquals("""", result, ""Keeping none of the characters should return an empty string"");
    }

    @Test
    @DisplayName(""Test keeping characters with overlapping sets"")
    void testKeepOverlappingSets() {
        String result = charSetUtils.keep(""abcdef"", new String[]{""abc"", ""cde""});
        assertEquals(""abccde"", result, ""Keeping characters with overlapping sets should return 'abccde'"");
    }
}
```","package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharSetUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class CharSetUtilsTest {

    private CharSetUtils charSetUtils;

    @BeforeEach
    void setUp() {
        charSetUtils = new CharSetUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test keeping specific characters in a string using a single set"")
    void testKeepSpecificChars() {
        String result = charSetUtils.keep(""hello world"", new String[]{""l""});
        assertEquals(""lll"", result, ""Result should be 'lll' keeping 'l' in 'hello world'"");
    }

    @Test
    @DisplayName(""Test keeping specific characters in a string using multiple sets"")
    void testKeepMultipleSets() {
        String result = charSetUtils.keep(""hello world"", new String[]{""l"", ""o""});
        assertEquals(""lloo"", result, ""Result should be 'lloo' keeping 'lo' in 'hello world'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test keeping characters when the target string is empty"")
    void testKeepEmptyString() {
        String result = charSetUtils.keep("""", new String[]{""a"", ""b""});
        assertEquals("""", result, ""Keeping any characters in an empty string should return an empty string"");
    }

    @Test
    @DisplayName(""Test keeping characters when set is empty"")
    void testKeepEmptySet() {
        String result = charSetUtils.keep(""hello"", new String[]{});
        assertEquals("""", result, ""Keeping with an empty set should return an empty string"");
    }

    // ERROR CASES

    @Test
    @DisplayName(""Test keeping characters when input string is null"")
    void testKeepNullString() {
        String result = charSetUtils.keep(null, new String[]{""a"", ""b""});
        assertNull(result, ""Keeping with a null string should return null"");
    }

    @Test
    @DisplayName(""Test keeping characters when set is null"")
    void testKeepNullSet() {
        String result = charSetUtils.keep(""hello"", null);
        assertEquals("""", result, ""Keeping with a null set should return an empty string"");
    }

    // CORNER CASES

    @Test
    @DisplayName(""Test keeping all characters"")
    void testKeepAllCharacters() {
        String result = charSetUtils.keep(""abcdef"", new String[]{""abcdef""});
        assertEquals(""abcdef"", result, ""Keeping all characters should return the original string"");
    }

    @Test
    @DisplayName(""Test keeping none of the characters"")
    void testKeepNoneOfCharacters() {
        String result = charSetUtils.keep(""abcdef"", new String[]{""xyz""});
        assertEquals("""", result, ""Keeping none of the characters should return an empty string"");
    }

    @Test
    @DisplayName(""Test keeping characters with overlapping sets"")
    void testKeepOverlappingSets() {
        String result = charSetUtils.keep(""abcdef"", new String[]{""abc"", ""cde""});
        assertEquals(""abccde"", result, ""Keeping characters with overlapping sets should return 'abccde'"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java"
"org.apache.commons.lang3.CharSetUtils.squeeze(java.lang.String, java.lang.String[])","java.lang.String squeeze(java.lang.String, java.lang.String[])","{
    java.lang.String str;
    java.lang.String[] set;
    unknown $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack9, buffer, ch, chars, chrs, i, lastChar, sz;


    str := @parameter0: java.lang.String;
    set := @parameter1: java.lang.String[];
    $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(str);

    if $stack9 != 0 goto label1;
    $stack10 = staticinvoke <org.apache.commons.lang3.CharSetUtils: boolean deepEmpty(java.lang.String[])>(set);

    if $stack10 == 0 goto label2;

  label1:
    $stack21 = str;

    return $stack21;

  label2:
    chars = staticinvoke <org.apache.commons.lang3.CharSet: org.apache.commons.lang3.CharSet getInstance(java.lang.String[])>(set);
    $stack11 = new java.lang.StringBuilder;
    $stack12 = virtualinvoke str.<java.lang.String: int length()>();
    specialinvoke $stack11.<java.lang.StringBuilder: void <init>(int)>($stack12);
    buffer = $stack11;
    chrs = virtualinvoke str.<java.lang.String: char[] toCharArray()>();
    sz = lengthof chrs;
    lastChar = 32;
    ch = 32;
    i = 0;

  label3:
    $stack16 = i;
    $stack15 = sz;

    if $stack16 >= $stack15 goto label6;
    ch = chrs[i];

    if ch != lastChar goto label4;

    if i == 0 goto label4;
    $stack20 = virtualinvoke chars.<org.apache.commons.lang3.CharSet: boolean contains(char)>(ch);

    if $stack20 == 0 goto label4;

    goto label5;

  label4:
    $stack18 = buffer;
    $stack17 = ch;
    $stack14 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack17);
    $stack19 = ch;
    lastChar = $stack19;

  label5:
    i = i + 1;

    goto label3;

  label6:
    $stack13 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>();

    return $stack13;
}
","```java
package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharSetUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class CharSetUtilsTest {

    private CharSetUtils charSetUtils;

    @BeforeEach
    void setUp() {
        charSetUtils = new CharSetUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test squeeze with no repeating characters"")
    void testSqueezeNoRepeats() {
        String str = ""abcdef"";
        String[] set = {""b"", ""d""};
        assertEquals(""abcdef"", charSetUtils.squeeze(str, set), ""String should remain unchanged when no repeats exist"");
    }

    @Test
    @DisplayName(""Test squeeze with repeating characters"")
    void testSqueezeWithRepeats() {
        String str = ""aabbccdd"";
        String[] set = {""a"", ""c""};
        assertEquals(""abccdd"", charSetUtils.squeeze(str, set), ""String should be squeezed correctly"");
    }

    @Test
    @DisplayName(""Test squeeze when set does not match any character"")
    void testSqueezeNonMatchingSet() {
        String str = ""hello"";
        String[] set = {""x"", ""y"", ""z""};
        assertEquals(""hello"", charSetUtils.squeeze(str, set), ""String should remain unchanged when set doesn't match"");
    }

    @Test
    @DisplayName(""Test squeeze across multiple character sets"")
    void testSqueezeMultipleSets() {
        String str = ""bootloop"";
        String[] set = {""b"", ""o""};
        assertEquals(""botloop"", charSetUtils.squeeze(str, set), ""String should squeeze correctly across sets"");
    }

    // EDGE CASES (String Content)

    @Test
    @DisplayName(""Test squeeze with entire string in set"")
    void testSqueezeFullStringInSet() {
        String str = ""aaaa"";
        String[] set = {""a""};
        assertEquals(""a"", charSetUtils.squeeze(str, set), ""All repeat characters should reduce to one"");
    }

    @Test
    @DisplayName(""Test squeeze with single element string"")
    void testSqueezeSingleCharacterString() {
        String str = ""a"";
        String[] set = {""a""};
        assertEquals(""a"", charSetUtils.squeeze(str, set), ""String with single character should remain unchanged"");
    }

    @Test
    @DisplayName(""Test squeeze with repeated non-set characters"")
    void testSqueezeNonSetRepeats() {
        String str = ""aaabbbccc"";
        String[] set = {""d"", ""e""};
        assertEquals(""aaabbbccc"", charSetUtils.squeeze(str, set), ""Non-set repeats should not be affected"");
    }

    // EDGE CASES (Empty and Null Inputs)

    @Test
    @DisplayName(""Test squeeze with empty string"")
    void testSqueezeEmptyString() {
        String str = """";
        String[] set = {""a"", ""b""};
        assertEquals("""", charSetUtils.squeeze(str, set), ""Empty string should remain empty"");
    }

    @Test
    @DisplayName(""Test squeeze with null string"")
    void testSqueezeNullString() {
        String str = null;
        String[] set = {""a"", ""b""};
        assertEquals(null, charSetUtils.squeeze(str, set), ""Null string should return null"");
    }

    @Test
    @DisplayName(""Test squeeze with empty set"")
    void testSqueezeEmptySet() {
        String str = ""test"";
        String[] set = {};
        assertEquals(""test"", charSetUtils.squeeze(str, set), ""Empty set should not affect the string"");
    }

    @Test
    @DisplayName(""Test squeeze with null set"")
    void testSqueezeNullSet() {
        String str = ""hello"";
        String[] set = null;
        assertEquals(""hello"", charSetUtils.squeeze(str, set), ""Null set should not affect the string"");
    }

    // CORNER CASES (Boundary Conditions)

    @Test
    @DisplayName(""Test squeeze with repeating characters at start"")
    void testSqueezeRepeatsAtStart() {
        String str = ""aaabbb"";
        String[] set = {""a""};
        assertEquals(""abbb"", charSetUtils.squeeze(str, set), ""Repeats at start should be squeezed"");
    }

    @Test
    @DisplayName(""Test squeeze with repeating characters at end"")
    void testSqueezeRepeatsAtEnd() {
        String str = ""bbbaaa"";
        String[] set = {""a""};
        assertEquals(""bbba"", charSetUtils.squeeze(str, set), ""Repeats at end should be squeezed"");
    }

    @Test
    @DisplayName(""Test squeeze with mid-word repeats"")
    void testSqueezeMidWordRepeats() {
        String str = ""hellooo there"";
        String[] set = {""o""};
        assertEquals(""heloo there"", charSetUtils.squeeze(str, set), ""Mid-word repeats should be squeezed"");
    }
}
```","package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharSetUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class CharSetUtilsTest {

    private CharSetUtils charSetUtils;

    @BeforeEach
    void setUp() {
        charSetUtils = new CharSetUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test squeeze with no repeating characters"")
    void testSqueezeNoRepeats() {
        String str = ""abcdef"";
        String[] set = {""b"", ""d""};
        assertEquals(""abcdef"", charSetUtils.squeeze(str, set), ""String should remain unchanged when no repeats exist"");
    }

    @Test
    @DisplayName(""Test squeeze with repeating characters"")
    void testSqueezeWithRepeats() {
        String str = ""aabbccdd"";
        String[] set = {""a"", ""c""};
        assertEquals(""abccdd"", charSetUtils.squeeze(str, set), ""String should be squeezed correctly"");
    }

    @Test
    @DisplayName(""Test squeeze when set does not match any character"")
    void testSqueezeNonMatchingSet() {
        String str = ""hello"";
        String[] set = {""x"", ""y"", ""z""};
        assertEquals(""hello"", charSetUtils.squeeze(str, set), ""String should remain unchanged when set doesn't match"");
    }

    @Test
    @DisplayName(""Test squeeze across multiple character sets"")
    void testSqueezeMultipleSets() {
        String str = ""bootloop"";
        String[] set = {""b"", ""o""};
        assertEquals(""botloop"", charSetUtils.squeeze(str, set), ""String should squeeze correctly across sets"");
    }

    // EDGE CASES (String Content)

    @Test
    @DisplayName(""Test squeeze with entire string in set"")
    void testSqueezeFullStringInSet() {
        String str = ""aaaa"";
        String[] set = {""a""};
        assertEquals(""a"", charSetUtils.squeeze(str, set), ""All repeat characters should reduce to one"");
    }

    @Test
    @DisplayName(""Test squeeze with single element string"")
    void testSqueezeSingleCharacterString() {
        String str = ""a"";
        String[] set = {""a""};
        assertEquals(""a"", charSetUtils.squeeze(str, set), ""String with single character should remain unchanged"");
    }

    @Test
    @DisplayName(""Test squeeze with repeated non-set characters"")
    void testSqueezeNonSetRepeats() {
        String str = ""aaabbbccc"";
        String[] set = {""d"", ""e""};
        assertEquals(""aaabbbccc"", charSetUtils.squeeze(str, set), ""Non-set repeats should not be affected"");
    }

    // EDGE CASES (Empty and Null Inputs)

    @Test
    @DisplayName(""Test squeeze with empty string"")
    void testSqueezeEmptyString() {
        String str = """";
        String[] set = {""a"", ""b""};
        assertEquals("""", charSetUtils.squeeze(str, set), ""Empty string should remain empty"");
    }

    @Test
    @DisplayName(""Test squeeze with null string"")
    void testSqueezeNullString() {
        String str = null;
        String[] set = {""a"", ""b""};
        assertEquals(null, charSetUtils.squeeze(str, set), ""Null string should return null"");
    }

    @Test
    @DisplayName(""Test squeeze with empty set"")
    void testSqueezeEmptySet() {
        String str = ""test"";
        String[] set = {};
        assertEquals(""test"", charSetUtils.squeeze(str, set), ""Empty set should not affect the string"");
    }

    @Test
    @DisplayName(""Test squeeze with null set"")
    void testSqueezeNullSet() {
        String str = ""hello"";
        String[] set = null;
        assertEquals(""hello"", charSetUtils.squeeze(str, set), ""Null set should not affect the string"");
    }

    // CORNER CASES (Boundary Conditions)

    @Test
    @DisplayName(""Test squeeze with repeating characters at start"")
    void testSqueezeRepeatsAtStart() {
        String str = ""aaabbb"";
        String[] set = {""a""};
        assertEquals(""abbb"", charSetUtils.squeeze(str, set), ""Repeats at start should be squeezed"");
    }

    @Test
    @DisplayName(""Test squeeze with repeating characters at end"")
    void testSqueezeRepeatsAtEnd() {
        String str = ""bbbaaa"";
        String[] set = {""a""};
        assertEquals(""bbba"", charSetUtils.squeeze(str, set), ""Repeats at end should be squeezed"");
    }

    @Test
    @DisplayName(""Test squeeze with mid-word repeats"")
    void testSqueezeMidWordRepeats() {
        String str = ""hellooo there"";
        String[] set = {""o""};
        assertEquals(""heloo there"", charSetUtils.squeeze(str, set), ""Mid-word repeats should be squeezed"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java"
"org.apache.commons.lang3.CharSetUtils.count(java.lang.String, java.lang.String[])","int count(java.lang.String, java.lang.String[])","{
    java.lang.String str;
    java.lang.String[] set;
    unknown $stack10, $stack11, $stack12, $stack13, $stack8, $stack9, c, chars, count, l4, l5, l6;


    str := @parameter0: java.lang.String;
    set := @parameter1: java.lang.String[];
    $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(str);

    if $stack8 != 0 goto label1;
    $stack9 = staticinvoke <org.apache.commons.lang3.CharSetUtils: boolean deepEmpty(java.lang.String[])>(set);

    if $stack9 == 0 goto label2;

  label1:
    $stack13 = 0;

    return $stack13;

  label2:
    chars = staticinvoke <org.apache.commons.lang3.CharSet: org.apache.commons.lang3.CharSet getInstance(java.lang.String[])>(set);
    count = 0;
    l4 = virtualinvoke str.<java.lang.String: char[] toCharArray()>();
    l5 = lengthof l4;
    l6 = 0;

  label3:
    $stack12 = l6;
    $stack11 = l5;

    if $stack12 >= $stack11 goto label5;
    c = l4[l6];
    $stack10 = virtualinvoke chars.<org.apache.commons.lang3.CharSet: boolean contains(char)>(c);

    if $stack10 == 0 goto label4;
    count = count + 1;

  label4:
    l6 = l6 + 1;

    goto label3;

  label5:
    return count;
}
","```java
package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharSetUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class CharSetUtilsTest {

    private CharSetUtils charSetUtils;

    @BeforeEach
    void setUp() {
        charSetUtils = new CharSetUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test count of characters appearing in string with multiple charsets"")
    void testCountMultipleCharsets() {
        String str = ""hello world"";
        String[] set = {""aeiou"", ""xyz""};
        assertEquals(3, charSetUtils.count(str, set), ""Count should be 3 for [hello world] with charsets [aeiou, xyz]"");
    }

    @Test
    @DisplayName(""Test count with multiple overlapping charsets"")
    void testCountOverlappingCharsets() {
        String str = ""banana"";
        String[] set = {""an"", ""na""};
        assertEquals(6, charSetUtils.count(str, set), ""Count should be 6 for [banana] with charsets [an, na]"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test count in string with single character sets"")
    void testCountSingleCharacterSets() {
        String str = ""abracadabra"";
        String[] set = {""a""};
        assertEquals(5, charSetUtils.count(str, set), ""Count should be 5 for [abracadabra] with charset [a]"");
    }

    @Test
    @DisplayName(""Test count in a string with no matching charsets"")
    void testCountNoMatchingCharsets() {
        String str = ""hello"";
        String[] set = {""qwrty""};
        assertEquals(0, charSetUtils.count(str, set), ""Count should be 0 for [hello] with charset [qwrty]"");
    }

    @Test
    @DisplayName(""Test empty input string"")
    void testEmptyInputString() {
        String str = """";
        String[] set = {""aeiou""};
        assertEquals(0, charSetUtils.count(str, set), ""Count should be 0 for empty input string"");
    }

    @Test
    @DisplayName(""Test empty charset array"")
    void testEmptyCharsetArray() {
        String str = ""hello"";
        String[] set = {};
        assertEquals(0, charSetUtils.count(str, set), ""Count should be 0 for empty charset array"");
    }

    @Test
    @DisplayName(""Test count in string with all matched characters"")
    void testAllMatchedCharacters() {
        String str = ""aaaaaa"";
        String[] set = {""a""};
        assertEquals(6, charSetUtils.count(str, set), ""Count should be 6 for [aaaaaa] with charset [a]"");
    }

    // ERROR CASES

    @Test
    @DisplayName(""Test null input string"")
    void testNullInputString() {
        String str = null;
        String[] set = {""aeiou""};
        assertEquals(0, charSetUtils.count(str, set), ""Count should be 0 for null input string"");
    }

    @Test
    @DisplayName(""Test null charset array"")
    void testNullCharsetArray() {
        String str = ""hello"";
        String[] set = null;
        assertEquals(0, charSetUtils.count(str, set), ""Count should be 0 for null charset array"");
    }
}
```","package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharSetUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class CharSetUtilsTest {

    private CharSetUtils charSetUtils;

    @BeforeEach
    void setUp() {
        charSetUtils = new CharSetUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test count of characters appearing in string with multiple charsets"")
    void testCountMultipleCharsets() {
        String str = ""hello world"";
        String[] set = {""aeiou"", ""xyz""};
        assertEquals(3, charSetUtils.count(str, set), ""Count should be 3 for [hello world] with charsets [aeiou, xyz]"");
    }

    @Test
    @DisplayName(""Test count with multiple overlapping charsets"")
    void testCountOverlappingCharsets() {
        String str = ""banana"";
        String[] set = {""an"", ""na""};
        assertEquals(6, charSetUtils.count(str, set), ""Count should be 6 for [banana] with charsets [an, na]"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test count in string with single character sets"")
    void testCountSingleCharacterSets() {
        String str = ""abracadabra"";
        String[] set = {""a""};
        assertEquals(5, charSetUtils.count(str, set), ""Count should be 5 for [abracadabra] with charset [a]"");
    }

    @Test
    @DisplayName(""Test count in a string with no matching charsets"")
    void testCountNoMatchingCharsets() {
        String str = ""hello"";
        String[] set = {""qwrty""};
        assertEquals(0, charSetUtils.count(str, set), ""Count should be 0 for [hello] with charset [qwrty]"");
    }

    @Test
    @DisplayName(""Test empty input string"")
    void testEmptyInputString() {
        String str = """";
        String[] set = {""aeiou""};
        assertEquals(0, charSetUtils.count(str, set), ""Count should be 0 for empty input string"");
    }

    @Test
    @DisplayName(""Test empty charset array"")
    void testEmptyCharsetArray() {
        String str = ""hello"";
        String[] set = {};
        assertEquals(0, charSetUtils.count(str, set), ""Count should be 0 for empty charset array"");
    }

    @Test
    @DisplayName(""Test count in string with all matched characters"")
    void testAllMatchedCharacters() {
        String str = ""aaaaaa"";
        String[] set = {""a""};
        assertEquals(6, charSetUtils.count(str, set), ""Count should be 6 for [aaaaaa] with charset [a]"");
    }

    // ERROR CASES

    @Test
    @DisplayName(""Test null input string"")
    void testNullInputString() {
        String str = null;
        String[] set = {""aeiou""};
        assertEquals(0, charSetUtils.count(str, set), ""Count should be 0 for null input string"");
    }

    @Test
    @DisplayName(""Test null charset array"")
    void testNullCharsetArray() {
        String str = ""hello"";
        String[] set = null;
        assertEquals(0, charSetUtils.count(str, set), ""Count should be 0 for null charset array"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java"
"org.apache.commons.lang3.CharSetUtils.deepEmpty(java.lang.String[])","boolean deepEmpty(java.lang.String[])","{
    java.lang.String[] strings;
    unknown $stack5, $stack6, $stack7, $stack8, l1, l2, l3, s;


    strings := @parameter0: java.lang.String[];

    if strings == null goto label3;
    l1 = strings;
    l2 = lengthof l1;
    l3 = 0;

  label1:
    $stack8 = l3;
    $stack7 = l2;

    if $stack8 >= $stack7 goto label3;
    s = l1[l3];
    $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>(s);

    if $stack6 == 0 goto label2;

    return 0;

  label2:
    l3 = l3 + 1;

    goto label1;

  label3:
    $stack5 = 1;

    return $stack5;
}
","```java
package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharSetUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class CharSetUtilsTest {

    private CharSetUtils charSetUtils;

    @BeforeEach
    void setUp() {
        charSetUtils = new CharSetUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test deepEmpty with all empty strings"")
    void testDeepEmptyAllEmptyStrings() {
        String[] strings = {"""", """", """"};
        assertTrue(charSetUtils.deepEmpty(strings), ""All empty strings should return true"");
    }

    @Test
    @DisplayName(""Test deepEmpty with a mix of empty and non-empty strings"")
    void testDeepEmptyMixedStrings() {
        String[] strings = {"""", ""non-empty"", """"};
        assertFalse(charSetUtils.deepEmpty(strings), ""Mixed empty and non-empty should return false"");
    }

    @Test
    @DisplayName(""Test deepEmpty with all non-empty strings"")
    void testDeepEmptyAllNonEmptyStrings() {
        String[] strings = {""foo"", ""bar"", ""baz""};
        assertFalse(charSetUtils.deepEmpty(strings), ""All non-empty strings should return false"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test deepEmpty on an empty array"")
    void testDeepEmptyEmptyArray() {
        String[] strings = {};
        assertTrue(charSetUtils.deepEmpty(strings), ""Empty array should return true"");
    }

    @Test
    @DisplayName(""Test deepEmpty with a single empty string"")
    void testDeepEmptySingleEmptyString() {
        String[] strings = {""""};
        assertTrue(charSetUtils.deepEmpty(strings), ""Single empty string should return true"");
    }

    @Test
    @DisplayName(""Test deepEmpty with a single non-empty string"")
    void testDeepEmptySingleNonEmptyString() {
        String[] strings = {""not empty""};
        assertFalse(charSetUtils.deepEmpty(strings), ""Single non-empty string should return false"");
    }

    // ERROR CASES

    @Test
    @DisplayName(""Test deepEmpty with null array"")
    void testDeepEmptyNullArray() {
        String[] strings = null;
        assertTrue(charSetUtils.deepEmpty(strings), ""Null array should return true"");
    }

    @Test
    @DisplayName(""Test deepEmpty with null elements in the array"")
    void testDeepEmptyWithNullElements() {
        String[] strings = {null, null, """"};
        assertTrue(charSetUtils.deepEmpty(strings), ""Null elements and empty string should return true"");
        
        String[] mixedStrings = {null, ""non-empty"", null};
        assertFalse(charSetUtils.deepEmpty(mixedStrings), ""Null elements and a non-empty string should return false"");
    }
}
```","package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharSetUtils class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class CharSetUtilsTest {

    private CharSetUtils charSetUtils;

    @BeforeEach
    void setUp() {
        charSetUtils = new CharSetUtils();
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test deepEmpty with all empty strings"")
    void testDeepEmptyAllEmptyStrings() {
        String[] strings = {"""", """", """"};
        assertTrue(charSetUtils.deepEmpty(strings), ""All empty strings should return true"");
    }

    @Test
    @DisplayName(""Test deepEmpty with a mix of empty and non-empty strings"")
    void testDeepEmptyMixedStrings() {
        String[] strings = {"""", ""non-empty"", """"};
        assertFalse(charSetUtils.deepEmpty(strings), ""Mixed empty and non-empty should return false"");
    }

    @Test
    @DisplayName(""Test deepEmpty with all non-empty strings"")
    void testDeepEmptyAllNonEmptyStrings() {
        String[] strings = {""foo"", ""bar"", ""baz""};
        assertFalse(charSetUtils.deepEmpty(strings), ""All non-empty strings should return false"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test deepEmpty on an empty array"")
    void testDeepEmptyEmptyArray() {
        String[] strings = {};
        assertTrue(charSetUtils.deepEmpty(strings), ""Empty array should return true"");
    }

    @Test
    @DisplayName(""Test deepEmpty with a single empty string"")
    void testDeepEmptySingleEmptyString() {
        String[] strings = {""""};
        assertTrue(charSetUtils.deepEmpty(strings), ""Single empty string should return true"");
    }

    @Test
    @DisplayName(""Test deepEmpty with a single non-empty string"")
    void testDeepEmptySingleNonEmptyString() {
        String[] strings = {""not empty""};
        assertFalse(charSetUtils.deepEmpty(strings), ""Single non-empty string should return false"");
    }

    // ERROR CASES

    @Test
    @DisplayName(""Test deepEmpty with null array"")
    void testDeepEmptyNullArray() {
        String[] strings = null;
        assertTrue(charSetUtils.deepEmpty(strings), ""Null array should return true"");
    }

    @Test
    @DisplayName(""Test deepEmpty with null elements in the array"")
    void testDeepEmptyWithNullElements() {
        String[] strings = {null, null, """"};
        assertTrue(charSetUtils.deepEmpty(strings), ""Null elements and empty string should return true"");
        
        String[] mixedStrings = {null, ""non-empty"", null};
        assertFalse(charSetUtils.deepEmpty(mixedStrings), ""Null elements and a non-empty string should return false"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java"
"org.apache.commons.lang3.CharRange.equals(java.lang.Object)","boolean equals(java.lang.Object)","{
    java.lang.Object obj;
    org.apache.commons.lang3.CharRange this;
    unknown $stack10, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, other;


    this := @this: org.apache.commons.lang3.CharRange;
    obj := @parameter0: java.lang.Object;

    if obj != this goto label1;

    return 1;

  label1:
    $stack3 = obj instanceof org.apache.commons.lang3.CharRange;

    if $stack3 != 0 goto label2;

    return 0;

  label2:
    other = (org.apache.commons.lang3.CharRange) obj;
    $stack5 = this.<org.apache.commons.lang3.CharRange: char start>;
    $stack4 = other.<org.apache.commons.lang3.CharRange: char start>;

    if $stack5 != $stack4 goto label3;
    $stack7 = this.<org.apache.commons.lang3.CharRange: char end>;
    $stack6 = other.<org.apache.commons.lang3.CharRange: char end>;

    if $stack7 != $stack6 goto label3;
    $stack10 = this.<org.apache.commons.lang3.CharRange: boolean negated>;
    $stack9 = other.<org.apache.commons.lang3.CharRange: boolean negated>;

    if $stack10 != $stack9 goto label3;
    $stack8 = 1;

    goto label4;

  label3:
    $stack8 = 0;

  label4:
    return $stack8;
}
","```java
package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class.
 * Covers typical cases, edge cases, corner cases, and equality checks.
 */
class CharRangeTest {

    private CharRange charRange;

    @BeforeEach
    void setUp() {
        charRange = new CharRange('a', 'z', false);
    }

    // Typical cases

    @Test
    @DisplayName(""Test equals with same object"")
    void testEqualsWithSameObject() {
        assertTrue(charRange.equals(charRange), ""CharRange should be equal to itself"");
    }

    @Test
    @DisplayName(""Test equals with another identical CharRange"")
    void testEqualsWithIdenticalCharRange() {
        CharRange other = new CharRange('a', 'z', false);
        assertTrue(charRange.equals(other), ""CharRange should be equal to another CharRange with same start, end, negated"");
    }

    @Test
    @DisplayName(""Test equals with different start"")
    void testEqualsWithDifferentStart() {
        CharRange other = new CharRange('b', 'z', false);
        assertFalse(charRange.equals(other), ""CharRange should not be equal if start is different"");
    }

    @Test
    @DisplayName(""Test equals with different end"")
    void testEqualsWithDifferentEnd() {
        CharRange other = new CharRange('a', 'y', false);
        assertFalse(charRange.equals(other), ""CharRange should not be equal if end is different"");
    }

    @Test
    @DisplayName(""Test equals with different negation"")
    void testEqualsWithDifferentNegation() {
        CharRange other = new CharRange('a', 'z', true);
        assertFalse(charRange.equals(other), ""CharRange should not be equal if negation is different"");
    }

    // Edge cases

    @Test
    @DisplayName(""Test equals with null"")
    void testEqualsWithNull() {
        assertFalse(charRange.equals(null), ""CharRange should not be equal to null"");
    }

    @Test
    @DisplayName(""Test equals with a different class"")
    void testEqualsWithDifferentClass() {
        assertFalse(charRange.equals(""a string""), ""CharRange should not be equal to an instance of a different class"");
    }

    // Edge case for single character range

    @Test
    @DisplayName(""Test equals with single character range"")
    void testEqualsSingleCharacterRange() {
        CharRange singleCharRange1 = new CharRange('c', 'c', false);
        CharRange singleCharRange2 = new CharRange('c', 'c', false);
        assertTrue(singleCharRange1.equals(singleCharRange2), ""Single character range should be equal if they match exactly"");

        CharRange singleCharRangeDiff = new CharRange('d', 'd', false);
        assertFalse(singleCharRange1.equals(singleCharRangeDiff), ""Single character range should not be equal if they differ"");
    }
}
```","package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class.
 * Covers typical cases, edge cases, corner cases, and equality checks.
 */
class CharRangeTest {

    private CharRange charRange;

    @BeforeEach
    void setUp() {
        charRange = new CharRange('a', 'z', false);
    }

    // Typical cases

    @Test
    @DisplayName(""Test equals with same object"")
    void testEqualsWithSameObject() {
        assertTrue(charRange.equals(charRange), ""CharRange should be equal to itself"");
    }

    @Test
    @DisplayName(""Test equals with another identical CharRange"")
    void testEqualsWithIdenticalCharRange() {
        CharRange other = new CharRange('a', 'z', false);
        assertTrue(charRange.equals(other), ""CharRange should be equal to another CharRange with same start, end, negated"");
    }

    @Test
    @DisplayName(""Test equals with different start"")
    void testEqualsWithDifferentStart() {
        CharRange other = new CharRange('b', 'z', false);
        assertFalse(charRange.equals(other), ""CharRange should not be equal if start is different"");
    }

    @Test
    @DisplayName(""Test equals with different end"")
    void testEqualsWithDifferentEnd() {
        CharRange other = new CharRange('a', 'y', false);
        assertFalse(charRange.equals(other), ""CharRange should not be equal if end is different"");
    }

    @Test
    @DisplayName(""Test equals with different negation"")
    void testEqualsWithDifferentNegation() {
        CharRange other = new CharRange('a', 'z', true);
        assertFalse(charRange.equals(other), ""CharRange should not be equal if negation is different"");
    }

    // Edge cases

    @Test
    @DisplayName(""Test equals with null"")
    void testEqualsWithNull() {
        assertFalse(charRange.equals(null), ""CharRange should not be equal to null"");
    }

    @Test
    @DisplayName(""Test equals with a different class"")
    void testEqualsWithDifferentClass() {
        assertFalse(charRange.equals(""a string""), ""CharRange should not be equal to an instance of a different class"");
    }

    // Edge case for single character range

    @Test
    @DisplayName(""Test equals with single character range"")
    void testEqualsSingleCharacterRange() {
        CharRange singleCharRange1 = new CharRange('c', 'c', false);
        CharRange singleCharRange2 = new CharRange('c', 'c', false);
        assertTrue(singleCharRange1.equals(singleCharRange2), ""Single character range should be equal if they match exactly"");

        CharRange singleCharRangeDiff = new CharRange('d', 'd', false);
        assertFalse(singleCharRange1.equals(singleCharRangeDiff), ""Single character range should not be equal if they differ"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
"org.apache.commons.lang3.CharRange.isNegated()","boolean isNegated()","{
    org.apache.commons.lang3.CharRange this;
    unknown $stack1;


    this := @this: org.apache.commons.lang3.CharRange;
    $stack1 = this.<org.apache.commons.lang3.CharRange: boolean negated>;

    return $stack1;
}
","```java
package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class.
 * Covers typical cases, edge cases, and error handling related to negation state.
 */
class CharRangeTest {

    private CharRange charRangeNegated;
    private CharRange charRangeNotNegated;

    @BeforeEach
    void setUp() {
        charRangeNegated = CharRange.isNotIn('a', 'z');  // Example for negated
        charRangeNotNegated = CharRange.isIn('a', 'z');  // Example for non-negated
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test isNegated when CharRange is negated"")
    void testIsNegatedTrue() {
        assertTrue(charRangeNegated.isNegated(), ""CharRange should be negated"");
    }

    @Test
    @DisplayName(""Test isNegated when CharRange is not negated"")
    void testIsNegatedFalse() {
        assertFalse(charRangeNotNegated.isNegated(), ""CharRange should not be negated"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test isNegated for a CharRange representing a single character negated"")
    void testSingleCharNegated() {
        CharRange singleCharNegated = CharRange.isNotIn('c');
        assertTrue(singleCharNegated.isNegated(), ""Single character CharRange should be negated"");
    }

    @Test
    @DisplayName(""Test isNegated for a CharRange representing a single character not negated"")
    void testSingleCharNotNegated() {
        CharRange singleCharNotNegated = CharRange.isIn('c');
        assertFalse(singleCharNotNegated.isNegated(), ""Single character CharRange should not be negated"");
    }
}
```","package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class.
 * Covers typical cases, edge cases, and error handling related to negation state.
 */
class CharRangeTest {

    private CharRange charRangeNegated;
    private CharRange charRangeNotNegated;

    @BeforeEach
    void setUp() {
        charRangeNegated = CharRange.isNotIn('a', 'z');  // Example for negated
        charRangeNotNegated = CharRange.isIn('a', 'z');  // Example for non-negated
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test isNegated when CharRange is negated"")
    void testIsNegatedTrue() {
        assertTrue(charRangeNegated.isNegated(), ""CharRange should be negated"");
    }

    @Test
    @DisplayName(""Test isNegated when CharRange is not negated"")
    void testIsNegatedFalse() {
        assertFalse(charRangeNotNegated.isNegated(), ""CharRange should not be negated"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test isNegated for a CharRange representing a single character negated"")
    void testSingleCharNegated() {
        CharRange singleCharNegated = CharRange.isNotIn('c');
        assertTrue(singleCharNegated.isNegated(), ""Single character CharRange should be negated"");
    }

    @Test
    @DisplayName(""Test isNegated for a CharRange representing a single character not negated"")
    void testSingleCharNotNegated() {
        CharRange singleCharNotNegated = CharRange.isIn('c');
        assertFalse(singleCharNotNegated.isNegated(), ""Single character CharRange should not be negated"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
"org.apache.commons.lang3.CharRange.hashCode()","int hashCode()","{
    org.apache.commons.lang3.CharRange this;
    unknown $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8;


    this := @this: org.apache.commons.lang3.CharRange;
    $stack1 = this.<org.apache.commons.lang3.CharRange: char start>;
    $stack4 = 83 + $stack1;
    $stack2 = this.<org.apache.commons.lang3.CharRange: char end>;
    $stack3 = 7 * $stack2;
    $stack6 = $stack4 + $stack3;
    $stack5 = this.<org.apache.commons.lang3.CharRange: boolean negated>;

    if $stack5 == 0 goto label1;
    $stack8 = 1;

    goto label2;

  label1:
    $stack8 = 0;

  label2:
    $stack7 = $stack6 + $stack8;

    return $stack7;
}
","```java
package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class.
 * Covers typical cases, edge cases, and boolean flag logic.
 */
class CharRangeTest {

    private CharRange charRange;

    @BeforeEach
    void setUp() {
        // Placeholder setup. In real tests, we would instantiate with actual values.
        charRange = new CharRange('a', 'z', false);
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test hashCode for standard CharRange without negation"")
    void testHashCodeStandardRange() {
        CharRange range = new CharRange('a', 'z', false);
        int expectedHashCode = 83 + ('a') + 7 * ('z') + 0;
        assertEquals(expectedHashCode, range.hashCode(), ""Hash code should match expected value for non-negated range"");
    }

    @Test
    @DisplayName(""Test hashCode for standard CharRange with negation"")
    void testHashCodeNegatedRange() {
        CharRange range = new CharRange('a', 'z', true);
        int expectedHashCode = 83 + ('a') + 7 * ('z') + 1;
        assertEquals(expectedHashCode, range.hashCode(), ""Hash code should match expected value for negated range"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test hashCode for CharRange with same start and end"")
    void testHashCodeSingleCharRange() {
        CharRange range = new CharRange('x', 'x', false);
        int expectedHashCode = 83 + ('x') + 7 * ('x') + 0;
        assertEquals(expectedHashCode, range.hashCode(), ""Hash code should match expected value for single character range"");
    }

    @Test
    @DisplayName(""Test hashCode for CharRange with minimal character values"")
    void testHashCodeMinimalValues() {
        CharRange range = new CharRange(Character.MIN_VALUE, Character.MIN_VALUE, false);
        int expectedHashCode = 83 + Character.MIN_VALUE + 7 * Character.MIN_VALUE + 0;
        assertEquals(expectedHashCode, range.hashCode(), ""Hash code should match expected value with minimal char values"");
    }

    @Test
    @DisplayName(""Test hashCode for CharRange with maximal character values"")
    void testHashCodeMaximalValues() {
        CharRange range = new CharRange(Character.MAX_VALUE, Character.MAX_VALUE, false);
        int expectedHashCode = 83 + Character.MAX_VALUE + 7 * Character.MAX_VALUE + 0;
        assertEquals(expectedHashCode, range.hashCode(), ""Hash code should match expected value with maximal char values"");
    }

    @Test
    @DisplayName(""Test hashCode for CharRange with start and end values swapped"")
    void testHashCodeReversedRange() {
        // Assuming CharRange wouldn't allow a 'reversed' range as valid
        CharRange range = new CharRange('z', 'a', false);
        int expectedHashCode = 83 + ('z') + 7 * ('a') + 0;
        assertEquals(expectedHashCode, range.hashCode(), ""Hash code calculation specific to implementation details for 'reversed' range"");
    }
}
```","package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class.
 * Covers typical cases, edge cases, and boolean flag logic.
 */
class CharRangeTest {

    private CharRange charRange;

    @BeforeEach
    void setUp() {
        // Placeholder setup. In real tests, we would instantiate with actual values.
        charRange = new CharRange('a', 'z', false);
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test hashCode for standard CharRange without negation"")
    void testHashCodeStandardRange() {
        CharRange range = new CharRange('a', 'z', false);
        int expectedHashCode = 83 + ('a') + 7 * ('z') + 0;
        assertEquals(expectedHashCode, range.hashCode(), ""Hash code should match expected value for non-negated range"");
    }

    @Test
    @DisplayName(""Test hashCode for standard CharRange with negation"")
    void testHashCodeNegatedRange() {
        CharRange range = new CharRange('a', 'z', true);
        int expectedHashCode = 83 + ('a') + 7 * ('z') + 1;
        assertEquals(expectedHashCode, range.hashCode(), ""Hash code should match expected value for negated range"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test hashCode for CharRange with same start and end"")
    void testHashCodeSingleCharRange() {
        CharRange range = new CharRange('x', 'x', false);
        int expectedHashCode = 83 + ('x') + 7 * ('x') + 0;
        assertEquals(expectedHashCode, range.hashCode(), ""Hash code should match expected value for single character range"");
    }

    @Test
    @DisplayName(""Test hashCode for CharRange with minimal character values"")
    void testHashCodeMinimalValues() {
        CharRange range = new CharRange(Character.MIN_VALUE, Character.MIN_VALUE, false);
        int expectedHashCode = 83 + Character.MIN_VALUE + 7 * Character.MIN_VALUE + 0;
        assertEquals(expectedHashCode, range.hashCode(), ""Hash code should match expected value with minimal char values"");
    }

    @Test
    @DisplayName(""Test hashCode for CharRange with maximal character values"")
    void testHashCodeMaximalValues() {
        CharRange range = new CharRange(Character.MAX_VALUE, Character.MAX_VALUE, false);
        int expectedHashCode = 83 + Character.MAX_VALUE + 7 * Character.MAX_VALUE + 0;
        assertEquals(expectedHashCode, range.hashCode(), ""Hash code should match expected value with maximal char values"");
    }

    @Test
    @DisplayName(""Test hashCode for CharRange with start and end values swapped"")
    void testHashCodeReversedRange() {
        // Assuming CharRange wouldn't allow a 'reversed' range as valid
        CharRange range = new CharRange('z', 'a', false);
        int expectedHashCode = 83 + ('z') + 7 * ('a') + 0;
        assertEquals(expectedHashCode, range.hashCode(), ""Hash code calculation specific to implementation details for 'reversed' range"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
"org.apache.commons.lang3.CharRange.toString()","java.lang.String toString()","{
    org.apache.commons.lang3.CharRange this;
    unknown $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack2, $stack20, $stack21, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, buf;


    this := @this: org.apache.commons.lang3.CharRange;
    $stack2 = this.<org.apache.commons.lang3.CharRange: java.lang.String iToString>;

    if $stack2 != null goto label3;
    $stack4 = new java.lang.StringBuilder;
    specialinvoke $stack4.<java.lang.StringBuilder: void <init>(int)>(4);
    buf = $stack4;
    $stack5 = virtualinvoke this.<org.apache.commons.lang3.CharRange: boolean isNegated()>();

    if $stack5 == 0 goto label1;
    $stack17 = virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(94);

  label1:
    $stack19 = buf;
    $stack18 = this;
    $stack6 = this.<org.apache.commons.lang3.CharRange: char start>;
    $stack7 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack6);
    $stack20 = this;
    $stack9 = this.<org.apache.commons.lang3.CharRange: char start>;
    $stack21 = this;
    $stack8 = this.<org.apache.commons.lang3.CharRange: char end>;

    if $stack9 == $stack8 goto label2;
    $stack12 = virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);
    $stack13 = this.<org.apache.commons.lang3.CharRange: char end>;
    $stack14 = virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack13);

  label2:
    $stack16 = this;
    $stack15 = buf;
    $stack10 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();
    this.<org.apache.commons.lang3.CharRange: java.lang.String iToString> = $stack10;

  label3:
    $stack11 = this;
    $stack3 = this.<org.apache.commons.lang3.CharRange: java.lang.String iToString>;

    return $stack3;
}
","```java
package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class.
 * Covers typical cases, edge cases, and negation handling.
 */
class CharRangeTest {

    private CharRange charRange;

    // Helper method to create CharRange with reflection
    private CharRange createCharRange(boolean negated, char start, char end) {
        try {
            CharRange instance = new CharRange(start, end, negated);
            return instance;
        } catch (Exception e) {
            // If there's an error with reflection, the test will fail
            fail(""Could not create CharRange instance: "" + e.getMessage());
            return null;
        }
    }
  
    @BeforeEach
    void setUp() {
        // Setup not used directly as instances are created with reflection
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test toString for a range with different start and end characters"")
    void testToStringRangeDifferentStartEnd() {
        charRange = createCharRange(false, 'a', 'z');
        assertEquals(""a-z"", charRange.toString(), ""Should return 'a-z' for range 'a' to 'z'"");
    }

    @Test
    @DisplayName(""Test toString for a range with the same start and end characters"")
    void testToStringRangeSameStartEnd() {
        charRange = createCharRange(false, 'a', 'a');
        assertEquals(""a"", charRange.toString(), ""Should return 'a' for range 'a' to 'a'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test toString for a negated range with different start and end characters"")
    void testToStringNegatedRangeDifferentStartEnd() {
        charRange = createCharRange(true, 'a', 'z');
        assertEquals(""^a-z"", charRange.toString(), ""Should return '^a-z' for negated range 'a' to 'z'"");
    }

    @Test
    @DisplayName(""Test toString for a negated range with the same start and end characters"")
    void testToStringNegatedRangeSameStartEnd() {
        charRange = createCharRange(true, 'a', 'a');
        assertEquals(""^a"", charRange.toString(), ""Should return '^a' for negated range 'a' to 'a'"");
    }

    // CORNER CASES

    @Test
    @DisplayName(""Test toString caching mechanism for repeated calls"")
    void testToStringCachingMechanism() {
        charRange = createCharRange(false, 'a', 'z');
        String firstCall = charRange.toString();
        String secondCall = charRange.toString();
        assertSame(firstCall, secondCall, ""toString() should return the same cached string instance on repeated calls"");
    }
}
```","package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class.
 * Covers typical cases, edge cases, and negation handling.
 */
class CharRangeTest {

    private CharRange charRange;

    // Helper method to create CharRange with reflection
    private CharRange createCharRange(boolean negated, char start, char end) {
        try {
            CharRange instance = new CharRange(start, end, negated);
            return instance;
        } catch (Exception e) {
            // If there's an error with reflection, the test will fail
            fail(""Could not create CharRange instance: "" + e.getMessage());
            return null;
        }
    }
  
    @BeforeEach
    void setUp() {
        // Setup not used directly as instances are created with reflection
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test toString for a range with different start and end characters"")
    void testToStringRangeDifferentStartEnd() {
        charRange = createCharRange(false, 'a', 'z');
        assertEquals(""a-z"", charRange.toString(), ""Should return 'a-z' for range 'a' to 'z'"");
    }

    @Test
    @DisplayName(""Test toString for a range with the same start and end characters"")
    void testToStringRangeSameStartEnd() {
        charRange = createCharRange(false, 'a', 'a');
        assertEquals(""a"", charRange.toString(), ""Should return 'a' for range 'a' to 'a'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test toString for a negated range with different start and end characters"")
    void testToStringNegatedRangeDifferentStartEnd() {
        charRange = createCharRange(true, 'a', 'z');
        assertEquals(""^a-z"", charRange.toString(), ""Should return '^a-z' for negated range 'a' to 'z'"");
    }

    @Test
    @DisplayName(""Test toString for a negated range with the same start and end characters"")
    void testToStringNegatedRangeSameStartEnd() {
        charRange = createCharRange(true, 'a', 'a');
        assertEquals(""^a"", charRange.toString(), ""Should return '^a' for negated range 'a' to 'a'"");
    }

    // CORNER CASES

    @Test
    @DisplayName(""Test toString caching mechanism for repeated calls"")
    void testToStringCachingMechanism() {
        charRange = createCharRange(false, 'a', 'z');
        String firstCall = charRange.toString();
        String secondCall = charRange.toString();
        assertSame(firstCall, secondCall, ""toString() should return the same cached string instance on repeated calls"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
"org.apache.commons.lang3.CharRange.isNot(char)","org.apache.commons.lang3.CharRange isNot(char)","{
    char ch;
    unknown $stack1;


    ch := @parameter0: char;
    $stack1 = new org.apache.commons.lang3.CharRange;
    specialinvoke $stack1.<org.apache.commons.lang3.CharRange: void <init>(char,char,boolean)>(ch, ch, 1);

    return $stack1;
}
","```java
package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class's isNot method.
 * Covers typical cases, edge cases, and checks object creation.
 */
class CharRangeTest {

    private CharRange charRange;

    @BeforeEach
    void setUp() {
        // Setup if necessary
    }

    // TYPICAL USE CASES

    @Test
    @DisplayName(""Test creation of CharRange with typical character"")
    void testIsNotTypicalCharacter() {
        char ch = 'a';
        charRange = CharRange.isNot(ch);
        assertNotNull(charRange, ""CharRange object should not be null"");
        assertEquals(ch, charRange.getStart(), ""Start should be the character itself"");
        assertEquals(ch, charRange.getEnd(), ""End should be the character itself"");
        assertTrue(charRange.isNegated(), ""CharRange should be negated"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test creation of CharRange with boundary value '\\0'"")
    void testIsNotBoundaryNullChar() {
        char ch = '\0';
        charRange = CharRange.isNot(ch);
        assertNotNull(charRange, ""CharRange object should not be null"");
        assertEquals(ch, charRange.getStart(), ""Start should be the null character"");
        assertEquals(ch, charRange.getEnd(), ""End should be the null character"");
        assertTrue(charRange.isNegated(), ""CharRange should be negated for null character"");
    }

    @Test
    @DisplayName(""Test creation of CharRange with boundary value '\\uFFFF'"")
    void testIsNotBoundaryMaxChar() {
        char ch = '\uFFFF';
        charRange = CharRange.isNot(ch);
        assertNotNull(charRange, ""CharRange object should not be null"");
        assertEquals(ch, charRange.getStart(), ""Start should be the maximum character value"");
        assertEquals(ch, charRange.getEnd(), ""End should be the maximum character value"");
        assertTrue(charRange.isNegated(), ""CharRange should be negated for maximum character value"");
    }

    // SPECIAL CASES

    @Test
    @DisplayName(""Test creation of CharRange with a numeric character"")
    void testIsNotNumericCharacter() {
        char ch = '1';
        charRange = CharRange.isNot(ch);
        assertNotNull(charRange, ""CharRange object should not be null"");
        assertEquals(ch, charRange.getStart(), ""Start should be the numeric character"");
        assertEquals(ch, charRange.getEnd(), ""End should be the numeric character"");
        assertTrue(charRange.isNegated(), ""CharRange should be negated for a numeric character"");
    }

    @Test
    @DisplayName(""Test creation of CharRange with a special character"")
    void testIsNotSpecialCharacter() {
        char ch = '$';
        charRange = CharRange.isNot(ch);
        assertNotNull(charRange, ""CharRange object should not be null"");
        assertEquals(ch, charRange.getStart(), ""Start should be the special character"");
        assertEquals(ch, charRange.getEnd(), ""End should be the special character"");
        assertTrue(charRange.isNegated(), ""CharRange should be negated for a special character"");
    }
}
```","package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class's isNot method.
 * Covers typical cases, edge cases, and checks object creation.
 */
class CharRangeTest {

    private CharRange charRange;

    @BeforeEach
    void setUp() {
        // Setup if necessary
    }

    // TYPICAL USE CASES

    @Test
    @DisplayName(""Test creation of CharRange with typical character"")
    void testIsNotTypicalCharacter() {
        char ch = 'a';
        charRange = CharRange.isNot(ch);
        assertNotNull(charRange, ""CharRange object should not be null"");
        assertEquals(ch, charRange.getStart(), ""Start should be the character itself"");
        assertEquals(ch, charRange.getEnd(), ""End should be the character itself"");
        assertTrue(charRange.isNegated(), ""CharRange should be negated"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test creation of CharRange with boundary value '\\0'"")
    void testIsNotBoundaryNullChar() {
        char ch = '\0';
        charRange = CharRange.isNot(ch);
        assertNotNull(charRange, ""CharRange object should not be null"");
        assertEquals(ch, charRange.getStart(), ""Start should be the null character"");
        assertEquals(ch, charRange.getEnd(), ""End should be the null character"");
        assertTrue(charRange.isNegated(), ""CharRange should be negated for null character"");
    }

    @Test
    @DisplayName(""Test creation of CharRange with boundary value '\\uFFFF'"")
    void testIsNotBoundaryMaxChar() {
        char ch = '\uFFFF';
        charRange = CharRange.isNot(ch);
        assertNotNull(charRange, ""CharRange object should not be null"");
        assertEquals(ch, charRange.getStart(), ""Start should be the maximum character value"");
        assertEquals(ch, charRange.getEnd(), ""End should be the maximum character value"");
        assertTrue(charRange.isNegated(), ""CharRange should be negated for maximum character value"");
    }

    // SPECIAL CASES

    @Test
    @DisplayName(""Test creation of CharRange with a numeric character"")
    void testIsNotNumericCharacter() {
        char ch = '1';
        charRange = CharRange.isNot(ch);
        assertNotNull(charRange, ""CharRange object should not be null"");
        assertEquals(ch, charRange.getStart(), ""Start should be the numeric character"");
        assertEquals(ch, charRange.getEnd(), ""End should be the numeric character"");
        assertTrue(charRange.isNegated(), ""CharRange should be negated for a numeric character"");
    }

    @Test
    @DisplayName(""Test creation of CharRange with a special character"")
    void testIsNotSpecialCharacter() {
        char ch = '$';
        charRange = CharRange.isNot(ch);
        assertNotNull(charRange, ""CharRange object should not be null"");
        assertEquals(ch, charRange.getStart(), ""Start should be the special character"");
        assertEquals(ch, charRange.getEnd(), ""End should be the special character"");
        assertTrue(charRange.isNegated(), ""CharRange should be negated for a special character"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
"org.apache.commons.lang3.CharRange.is(char)","org.apache.commons.lang3.CharRange is(char)","{
    char ch;
    unknown $stack1;


    ch := @parameter0: char;
    $stack1 = new org.apache.commons.lang3.CharRange;
    specialinvoke $stack1.<org.apache.commons.lang3.CharRange: void <init>(char,char,boolean)>(ch, ch, 0);

    return $stack1;
}
","```java
package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class CharRangeTest {

    private CharRange charRange;

    @BeforeEach
    void setUp() {
        // Initialize something common for the tests if needed
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test char range creation with a typical character"")
    void testCharRangeWithTypicalCharacter() {
        char ch = 'a';
        CharRange result = charRange.is(ch);
        CharRange expected = new CharRange(ch, ch, false);
        assertEquals(expected, result, ""CharRange should create a range with single character 'a'"");
    }

    @Test
    @DisplayName(""Test char range creation for digit character"")
    void testCharRangeWithDigitCharacter() {
        char ch = '5';
        CharRange result = charRange.is(ch);
        CharRange expected = new CharRange(ch, ch, false);
        assertEquals(expected, result, ""CharRange should create a range with single digit '5'"");
    }

    @Test
    @DisplayName(""Test char range creation for special character"")
    void testCharRangeWithSpecialCharacter() {
        char ch = '#';
        CharRange result = charRange.is(ch);
        CharRange expected = new CharRange(ch, ch, false);
        assertEquals(expected, result, ""CharRange should create a range with special character '#'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test char range creation for boundary character (lowercase letter)"")
    void testCharRangeWithBoundaryLowercase() {
        char ch = 'z';
        CharRange result = charRange.is(ch);
        CharRange expected = new CharRange(ch, ch, false);
        assertEquals(expected, result, ""CharRange should create a range with character 'z'"");
    }

    @Test
    @DisplayName(""Test char range creation for boundary character (uppercase letter)"")
    void testCharRangeWithBoundaryUppercase() {
        char ch = 'A';
        CharRange result = charRange.is(ch);
        CharRange expected = new CharRange(ch, ch, false);
        assertEquals(expected, result, ""CharRange should create a range with character 'A'"");
    }

    @Test
    @DisplayName(""Test char range creation for boundary character (numeric)"")
    void testCharRangeWithBoundaryNumeric() {
        char ch = '0';
        CharRange result = charRange.is(ch);
        CharRange expected = new CharRange(ch, ch, false);
        assertEquals(expected, result, ""CharRange should create a range with character '0'"");
    }

    // CORNER CASES

    @Test
    @DisplayName(""Test char range creation with first ASCII printable character"")
    void testCharRangeFirstASCIIPrintable() {
        char ch = ' ';
        CharRange result = charRange.is(ch);
        CharRange expected = new CharRange(ch, ch, false);
        assertEquals(expected, result, ""CharRange should create a range with first ASCII printable character ' '"");
    }
    
    @Test
    @DisplayName(""Test char range creation with last ASCII printable character"")
    void testCharRangeLastASCIIPrintable() {
        char ch = '~';
        CharRange result = charRange.is(ch);
        CharRange expected = new CharRange(ch, ch, false);
        assertEquals(expected, result, ""CharRange should create a range with last ASCII printable character '~'"");
    }
    
    @Test
    @DisplayName(""Test char range creation with non-printable character"")
    void testCharRangeNonPrintable() {
        char ch = '\n';
        CharRange result = charRange.is(ch);
        CharRange expected = new CharRange(ch, ch, false);
        assertEquals(expected, result, ""CharRange should create a range with non-printable character '\\n'"");
    }
}
```","package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class CharRangeTest {

    private CharRange charRange;

    @BeforeEach
    void setUp() {
        // Initialize something common for the tests if needed
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test char range creation with a typical character"")
    void testCharRangeWithTypicalCharacter() {
        char ch = 'a';
        CharRange result = charRange.is(ch);
        CharRange expected = new CharRange(ch, ch, false);
        assertEquals(expected, result, ""CharRange should create a range with single character 'a'"");
    }

    @Test
    @DisplayName(""Test char range creation for digit character"")
    void testCharRangeWithDigitCharacter() {
        char ch = '5';
        CharRange result = charRange.is(ch);
        CharRange expected = new CharRange(ch, ch, false);
        assertEquals(expected, result, ""CharRange should create a range with single digit '5'"");
    }

    @Test
    @DisplayName(""Test char range creation for special character"")
    void testCharRangeWithSpecialCharacter() {
        char ch = '#';
        CharRange result = charRange.is(ch);
        CharRange expected = new CharRange(ch, ch, false);
        assertEquals(expected, result, ""CharRange should create a range with special character '#'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test char range creation for boundary character (lowercase letter)"")
    void testCharRangeWithBoundaryLowercase() {
        char ch = 'z';
        CharRange result = charRange.is(ch);
        CharRange expected = new CharRange(ch, ch, false);
        assertEquals(expected, result, ""CharRange should create a range with character 'z'"");
    }

    @Test
    @DisplayName(""Test char range creation for boundary character (uppercase letter)"")
    void testCharRangeWithBoundaryUppercase() {
        char ch = 'A';
        CharRange result = charRange.is(ch);
        CharRange expected = new CharRange(ch, ch, false);
        assertEquals(expected, result, ""CharRange should create a range with character 'A'"");
    }

    @Test
    @DisplayName(""Test char range creation for boundary character (numeric)"")
    void testCharRangeWithBoundaryNumeric() {
        char ch = '0';
        CharRange result = charRange.is(ch);
        CharRange expected = new CharRange(ch, ch, false);
        assertEquals(expected, result, ""CharRange should create a range with character '0'"");
    }

    // CORNER CASES

    @Test
    @DisplayName(""Test char range creation with first ASCII printable character"")
    void testCharRangeFirstASCIIPrintable() {
        char ch = ' ';
        CharRange result = charRange.is(ch);
        CharRange expected = new CharRange(ch, ch, false);
        assertEquals(expected, result, ""CharRange should create a range with first ASCII printable character ' '"");
    }
    
    @Test
    @DisplayName(""Test char range creation with last ASCII printable character"")
    void testCharRangeLastASCIIPrintable() {
        char ch = '~';
        CharRange result = charRange.is(ch);
        CharRange expected = new CharRange(ch, ch, false);
        assertEquals(expected, result, ""CharRange should create a range with last ASCII printable character '~'"");
    }
    
    @Test
    @DisplayName(""Test char range creation with non-printable character"")
    void testCharRangeNonPrintable() {
        char ch = '\n';
        CharRange result = charRange.is(ch);
        CharRange expected = new CharRange(ch, ch, false);
        assertEquals(expected, result, ""CharRange should create a range with non-printable character '\\n'"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
"org.apache.commons.lang3.CharRange.getStart()","char getStart()","{
    org.apache.commons.lang3.CharRange this;
    unknown $stack1;


    this := @this: org.apache.commons.lang3.CharRange;
    $stack1 = this.<org.apache.commons.lang3.CharRange: char start>;

    return $stack1;
}
","```java
package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class's getStart method.
 * Covers typical cases and edge cases.
 */
class CharRangeTest {

    private CharRange charRange;

    @BeforeEach
    void setUp() {
        // Assumption: the CharRange constructor or some method must be used to properly initialize 'start'.
        // Assuming a sample range initialization for tests. Actual initialization may vary.
        charRange = new CharRange('a', 'z');
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test getStart for typical range"")
    void testGetStartTypicalRange() {
        assertEquals('a', charRange.getStart(), ""Start should be 'a' for range 'a' to 'z'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test getStart when start is a single character"")
    void testGetStartSingleCharacterRange() {
        CharRange singleCharRange = new CharRange('x', 'x');
        assertEquals('x', singleCharRange.getStart(), ""Start should be 'x' for single character range 'x' to 'x'"");
    }

    @Test
    @DisplayName(""Test getStart when range starts with a special character"")
    void testGetStartSpecialCharacter() {
        CharRange specialCharRange = new CharRange('!', '@');
        assertEquals('!', specialCharRange.getStart(), ""Start should be '!' for range '!' to '@'"");
    }

    @Test
    @DisplayName(""Test getStart for range starting at Unicode boundary"")
    void testGetStartUnicodeBoundary() {
        CharRange unicodeBoundaryRange = new CharRange(Character.MIN_CODE_POINT, 1000);
        assertEquals(Character.MIN_CODE_POINT, unicodeBoundaryRange.getStart(), ""Start should be the unicode minimum"");
    }
}
```","package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class's getStart method.
 * Covers typical cases and edge cases.
 */
class CharRangeTest {

    private CharRange charRange;

    @BeforeEach
    void setUp() {
        // Assumption: the CharRange constructor or some method must be used to properly initialize 'start'.
        // Assuming a sample range initialization for tests. Actual initialization may vary.
        charRange = new CharRange('a', 'z');
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test getStart for typical range"")
    void testGetStartTypicalRange() {
        assertEquals('a', charRange.getStart(), ""Start should be 'a' for range 'a' to 'z'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test getStart when start is a single character"")
    void testGetStartSingleCharacterRange() {
        CharRange singleCharRange = new CharRange('x', 'x');
        assertEquals('x', singleCharRange.getStart(), ""Start should be 'x' for single character range 'x' to 'x'"");
    }

    @Test
    @DisplayName(""Test getStart when range starts with a special character"")
    void testGetStartSpecialCharacter() {
        CharRange specialCharRange = new CharRange('!', '@');
        assertEquals('!', specialCharRange.getStart(), ""Start should be '!' for range '!' to '@'"");
    }

    @Test
    @DisplayName(""Test getStart for range starting at Unicode boundary"")
    void testGetStartUnicodeBoundary() {
        CharRange unicodeBoundaryRange = new CharRange(Character.MIN_CODE_POINT, 1000);
        assertEquals(Character.MIN_CODE_POINT, unicodeBoundaryRange.getStart(), ""Start should be the unicode minimum"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
"org.apache.commons.lang3.CharRange.contains(char)","boolean contains(char)","{
    char ch;
    org.apache.commons.lang3.CharRange this;
    unknown $stack2, $stack3, $stack4, $stack5, $stack6, $stack7;


    this := @this: org.apache.commons.lang3.CharRange;
    ch := @parameter0: char;
    $stack2 = this.<org.apache.commons.lang3.CharRange: char start>;

    if ch < $stack2 goto label1;
    $stack5 = this.<org.apache.commons.lang3.CharRange: char end>;

    if ch > $stack5 goto label1;
    $stack7 = 1;

    goto label2;

  label1:
    $stack7 = 0;

  label2:
    $stack6 = this;
    $stack3 = this.<org.apache.commons.lang3.CharRange: boolean negated>;

    if $stack7 == $stack3 goto label3;
    $stack4 = 1;

    goto label4;

  label3:
    $stack4 = 0;

  label4:
    return $stack4;
}
","```java
package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class.
 * Covers typical cases, edge cases, corner cases, and negated ranges.
 */
class CharRangeTest {

    private CharRange range;
    private CharRange negatedRange;

    @BeforeEach
    void setUp() {
        range = new CharRange('a', 'z', false);
        negatedRange = new CharRange('a', 'z', true);
    }

    // Typical Cases

    @Test
    @DisplayName(""Test contains with character inside range"")
    void testContainsWithinRange() {
        assertTrue(range.contains('m'), ""Character 'm' should be in the range 'a' to 'z'"");
    }

    @Test
    @DisplayName(""Test contains with character equal to start of range"")
    void testContainsStartOfRange() {
        assertTrue(range.contains('a'), ""Character 'a' should be in the range 'a' to 'z'"");
    }

    @Test
    @DisplayName(""Test contains with character equal to end of range"")
    void testContainsEndOfRange() {
        assertTrue(range.contains('z'), ""Character 'z' should be in the range 'a' to 'z'"");
    }

    @Test
    @DisplayName(""Test contains with character outside range (below)"")
    void testContainsBelowRange() {
        assertFalse(range.contains('A'), ""Character 'A' should not be in the range 'a' to 'z'"");
    }

    @Test
    @DisplayName(""Test contains with character outside range (above)"")
    void testContainsAboveRange() {
        assertFalse(range.contains('{'), ""Character '{' should not be in the range 'a' to 'z'"");
    }

    // Negated Range Cases

    @Test
    @DisplayName(""Test negated range contains with character outside range"")
    void testNegatedContainsOutsideRange() {
        assertTrue(negatedRange.contains('A'), ""Character 'A' should be outside the negated range 'a' to 'z'"");
        assertTrue(negatedRange.contains('{'), ""Character '{' should be outside the negated range 'a' to 'z'"");
    }

    @Test
    @DisplayName(""Test negated range contains with character inside range"")
    void testNegatedContainsInsideRange() {
        assertFalse(negatedRange.contains('m'), ""Character 'm' should not be outside the negated range 'a' to 'z'"");
    }

    @Test
    @DisplayName(""Test negated range contains with character equal to start of range"")
    void testNegatedContainsStartOfRange() {
        assertFalse(negatedRange.contains('a'), ""Character 'a' should not be outside the negated range 'a' to 'z'"");
    }

    @Test
    @DisplayName(""Test negated range contains with character equal to end of range"")
    void testNegatedContainsEndOfRange() {
        assertFalse(negatedRange.contains('z'), ""Character 'z' should not be outside the negated range 'a' to 'z'"");
    }

    // Edge Cases

    @Test
    @DisplayName(""Test contains with character in a single-character range"")
    void testSingleCharacterRange() {
        CharRange singleCharRange = new CharRange('a', 'a', false);
        assertTrue(singleCharRange.contains('a'), ""Character 'a' should be in the single-character range 'a'"");
        assertFalse(singleCharRange.contains('b'), ""Character 'b' should not be in the single-character range 'a'"");
    }

    @Test
    @DisplayName(""Test negated single-character range"")
    void testNegatedSingleCharacterRange() {
        CharRange negatedSingleCharRange = new CharRange('a', 'a', true);
        assertFalse(negatedSingleCharRange.contains('a'), ""Character 'a' should not be in the negated single-character range 'a'"");
        assertTrue(negatedSingleCharRange.contains('b'), ""Character 'b' should be outside the negated single-character range 'a'"");
    }
}
```","package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class.
 * Covers typical cases, edge cases, corner cases, and negated ranges.
 */
class CharRangeTest {

    private CharRange range;
    private CharRange negatedRange;

    @BeforeEach
    void setUp() {
        range = new CharRange('a', 'z', false);
        negatedRange = new CharRange('a', 'z', true);
    }

    // Typical Cases

    @Test
    @DisplayName(""Test contains with character inside range"")
    void testContainsWithinRange() {
        assertTrue(range.contains('m'), ""Character 'm' should be in the range 'a' to 'z'"");
    }

    @Test
    @DisplayName(""Test contains with character equal to start of range"")
    void testContainsStartOfRange() {
        assertTrue(range.contains('a'), ""Character 'a' should be in the range 'a' to 'z'"");
    }

    @Test
    @DisplayName(""Test contains with character equal to end of range"")
    void testContainsEndOfRange() {
        assertTrue(range.contains('z'), ""Character 'z' should be in the range 'a' to 'z'"");
    }

    @Test
    @DisplayName(""Test contains with character outside range (below)"")
    void testContainsBelowRange() {
        assertFalse(range.contains('A'), ""Character 'A' should not be in the range 'a' to 'z'"");
    }

    @Test
    @DisplayName(""Test contains with character outside range (above)"")
    void testContainsAboveRange() {
        assertFalse(range.contains('{'), ""Character '{' should not be in the range 'a' to 'z'"");
    }

    // Negated Range Cases

    @Test
    @DisplayName(""Test negated range contains with character outside range"")
    void testNegatedContainsOutsideRange() {
        assertTrue(negatedRange.contains('A'), ""Character 'A' should be outside the negated range 'a' to 'z'"");
        assertTrue(negatedRange.contains('{'), ""Character '{' should be outside the negated range 'a' to 'z'"");
    }

    @Test
    @DisplayName(""Test negated range contains with character inside range"")
    void testNegatedContainsInsideRange() {
        assertFalse(negatedRange.contains('m'), ""Character 'm' should not be outside the negated range 'a' to 'z'"");
    }

    @Test
    @DisplayName(""Test negated range contains with character equal to start of range"")
    void testNegatedContainsStartOfRange() {
        assertFalse(negatedRange.contains('a'), ""Character 'a' should not be outside the negated range 'a' to 'z'"");
    }

    @Test
    @DisplayName(""Test negated range contains with character equal to end of range"")
    void testNegatedContainsEndOfRange() {
        assertFalse(negatedRange.contains('z'), ""Character 'z' should not be outside the negated range 'a' to 'z'"");
    }

    // Edge Cases

    @Test
    @DisplayName(""Test contains with character in a single-character range"")
    void testSingleCharacterRange() {
        CharRange singleCharRange = new CharRange('a', 'a', false);
        assertTrue(singleCharRange.contains('a'), ""Character 'a' should be in the single-character range 'a'"");
        assertFalse(singleCharRange.contains('b'), ""Character 'b' should not be in the single-character range 'a'"");
    }

    @Test
    @DisplayName(""Test negated single-character range"")
    void testNegatedSingleCharacterRange() {
        CharRange negatedSingleCharRange = new CharRange('a', 'a', true);
        assertFalse(negatedSingleCharRange.contains('a'), ""Character 'a' should not be in the negated single-character range 'a'"");
        assertTrue(negatedSingleCharRange.contains('b'), ""Character 'b' should be outside the negated single-character range 'a'"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
"org.apache.commons.lang3.CharRange.iterator()","java.util.Iterator iterator()","{
    org.apache.commons.lang3.CharRange this;
    unknown $stack1;


    this := @this: org.apache.commons.lang3.CharRange;
    $stack1 = new org.apache.commons.lang3.CharRange$CharacterIterator;
    specialinvoke $stack1.<org.apache.commons.lang3.CharRange$CharacterIterator: void <init>(org.apache.commons.lang3.CharRange,org.apache.commons.lang3.CharRange$1)>(this, null);

    return $stack1;
}
","```java
package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.Iterator;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class.
 * Covers typical cases and error handling.
 */
class CharRangeTest {

    private CharRange charRange;

    @BeforeEach
    void setUp() {
        // Assuming CharRange has a constructor that takes two characters as start and end.
        charRange = new CharRange('a', 'z'); // Example range
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test iterator creation for a typical character range"")
    void testIteratorCreation() {
        Iterator<Character> iterator = charRange.iterator();
        assertNotNull(iterator, ""Iterator should not be null"");
        
        assertTrue(iterator.hasNext(), ""Iterator should initially have next element"");
        assertEquals('a', iterator.next(), ""First element should be 'a'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test iterator for a single-element range"")
    void testIteratorSingleElementRange() {
        charRange = new CharRange('a', 'a'); // Single element range
        Iterator<Character> iterator = charRange.iterator();

        assertTrue(iterator.hasNext(), ""Iterator should have next element for single element range"");
        assertEquals('a', iterator.next(), ""Element should be 'a'"");
        assertFalse(iterator.hasNext(), ""Iterator should not have next element after single element"");
    }

    @Test
    @DisplayName(""Test iterator for full ASCII range"")
    void testIteratorFullASCIIRange() {
        charRange = new CharRange((char) 0, (char) 127); // Full ASCII range
        Iterator<Character> iterator = charRange.iterator();

        for (char c = 0; c <= 127; c++) {
            assertTrue(iterator.hasNext(), ""Iterator should have next element for full ASCII range"");
            assertEquals(c, iterator.next(), ""Element should match the ASCII character"");
        }
        assertFalse(iterator.hasNext(), ""Iterator should not have next element after full ASCII range"");
    }

    // ERROR CASES

    @Test
    @DisplayName(""Test iterator for an empty range"")
    void testIteratorEmptyRange() {
        charRange = new CharRange('b', 'a'); // Empty range where start > end
        Iterator<Character> iterator = charRange.iterator();

        assertFalse(iterator.hasNext(), ""Iterator should not have next element for empty range"");
    }
}
```","package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.Iterator;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class.
 * Covers typical cases and error handling.
 */
class CharRangeTest {

    private CharRange charRange;

    @BeforeEach
    void setUp() {
        // Assuming CharRange has a constructor that takes two characters as start and end.
        charRange = new CharRange('a', 'z'); // Example range
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test iterator creation for a typical character range"")
    void testIteratorCreation() {
        Iterator<Character> iterator = charRange.iterator();
        assertNotNull(iterator, ""Iterator should not be null"");
        
        assertTrue(iterator.hasNext(), ""Iterator should initially have next element"");
        assertEquals('a', iterator.next(), ""First element should be 'a'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test iterator for a single-element range"")
    void testIteratorSingleElementRange() {
        charRange = new CharRange('a', 'a'); // Single element range
        Iterator<Character> iterator = charRange.iterator();

        assertTrue(iterator.hasNext(), ""Iterator should have next element for single element range"");
        assertEquals('a', iterator.next(), ""Element should be 'a'"");
        assertFalse(iterator.hasNext(), ""Iterator should not have next element after single element"");
    }

    @Test
    @DisplayName(""Test iterator for full ASCII range"")
    void testIteratorFullASCIIRange() {
        charRange = new CharRange((char) 0, (char) 127); // Full ASCII range
        Iterator<Character> iterator = charRange.iterator();

        for (char c = 0; c <= 127; c++) {
            assertTrue(iterator.hasNext(), ""Iterator should have next element for full ASCII range"");
            assertEquals(c, iterator.next(), ""Element should match the ASCII character"");
        }
        assertFalse(iterator.hasNext(), ""Iterator should not have next element after full ASCII range"");
    }

    // ERROR CASES

    @Test
    @DisplayName(""Test iterator for an empty range"")
    void testIteratorEmptyRange() {
        charRange = new CharRange('b', 'a'); // Empty range where start > end
        Iterator<Character> iterator = charRange.iterator();

        assertFalse(iterator.hasNext(), ""Iterator should not have next element for empty range"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
"org.apache.commons.lang3.CharRange.getEnd()","char getEnd()","{
    org.apache.commons.lang3.CharRange this;
    unknown $stack1;


    this := @this: org.apache.commons.lang3.CharRange;
    $stack1 = this.<org.apache.commons.lang3.CharRange: char end>;

    return $stack1;
}
","```java
package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class.
 * Tests the getEnd method for expected behaviors.
 */
class CharRangeTest {

    private CharRange charRange;

    @BeforeEach
    void setUp() {
        // Assuming a constructor that initializes 'end' is available
        charRange = new CharRange('a', 'z'); // Example initialization for testing
    }

    // TYPICAL CASE

    @Test
    @DisplayName(""Test retrieving end character"")
    void testGetEndCharacter() {
        assertEquals('z', charRange.getEnd(), ""End character should be 'z'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test retrieving end character when single-element range"")
    void testGetEndSingleElementRange() {
        CharRange singleCharRange = new CharRange('a', 'a');
        assertEquals('a', singleCharRange.getEnd(), ""End character should be 'a' for single-element range"");
    }

    @Test
    @DisplayName(""Test retrieving end character for special character range"")
    void testGetEndSpecialCharacterRange() {
        CharRange specialCharRange = new CharRange('\u0000', '\u007F');
        assertEquals('\u007F', specialCharRange.getEnd(), ""End character should be '\\u007F' for ASCII range"");
    }

    // BOUNDARY CASES

    @Test
    @DisplayName(""Test retrieving end character for full Unicode range"")
    void testGetEndFullUnicodeRange() {
        CharRange fullUnicodeRange = new CharRange('\u0000', '\uFFFF');
        assertEquals('\uFFFF', fullUnicodeRange.getEnd(), ""End character should be '\\uFFFF' for full Unicode range"");
    }

    @Test
    @DisplayName(""Test retrieving end character with high surrogate"")
    void testGetEndWithHighSurrogate() {
        CharRange highSurrogateRange = new CharRange('\uD800', '\uDBFF');
        assertEquals('\uDBFF', highSurrogateRange.getEnd(), ""End character should be '\\uDBFF' for high surrogate range"");
    }

    @Test
    @DisplayName(""Test retrieving end character with low surrogate"")
    void testGetEndWithLowSurrogate() {
        CharRange lowSurrogateRange = new CharRange('\uDC00', '\uDFFF');
        assertEquals('\uDFFF', lowSurrogateRange.getEnd(), ""End character should be '\\uDFFF' for low surrogate range"");
    }
}
```","package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class.
 * Tests the getEnd method for expected behaviors.
 */
class CharRangeTest {

    private CharRange charRange;

    @BeforeEach
    void setUp() {
        // Assuming a constructor that initializes 'end' is available
        charRange = new CharRange('a', 'z'); // Example initialization for testing
    }

    // TYPICAL CASE

    @Test
    @DisplayName(""Test retrieving end character"")
    void testGetEndCharacter() {
        assertEquals('z', charRange.getEnd(), ""End character should be 'z'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test retrieving end character when single-element range"")
    void testGetEndSingleElementRange() {
        CharRange singleCharRange = new CharRange('a', 'a');
        assertEquals('a', singleCharRange.getEnd(), ""End character should be 'a' for single-element range"");
    }

    @Test
    @DisplayName(""Test retrieving end character for special character range"")
    void testGetEndSpecialCharacterRange() {
        CharRange specialCharRange = new CharRange('\u0000', '\u007F');
        assertEquals('\u007F', specialCharRange.getEnd(), ""End character should be '\\u007F' for ASCII range"");
    }

    // BOUNDARY CASES

    @Test
    @DisplayName(""Test retrieving end character for full Unicode range"")
    void testGetEndFullUnicodeRange() {
        CharRange fullUnicodeRange = new CharRange('\u0000', '\uFFFF');
        assertEquals('\uFFFF', fullUnicodeRange.getEnd(), ""End character should be '\\uFFFF' for full Unicode range"");
    }

    @Test
    @DisplayName(""Test retrieving end character with high surrogate"")
    void testGetEndWithHighSurrogate() {
        CharRange highSurrogateRange = new CharRange('\uD800', '\uDBFF');
        assertEquals('\uDBFF', highSurrogateRange.getEnd(), ""End character should be '\\uDBFF' for high surrogate range"");
    }

    @Test
    @DisplayName(""Test retrieving end character with low surrogate"")
    void testGetEndWithLowSurrogate() {
        CharRange lowSurrogateRange = new CharRange('\uDC00', '\uDFFF');
        assertEquals('\uDFFF', lowSurrogateRange.getEnd(), ""End character should be '\\uDFFF' for low surrogate range"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
"org.apache.commons.lang3.CharRange.isNotIn(char, char)","org.apache.commons.lang3.CharRange isNotIn(char, char)","{
    char end, start;
    unknown $stack2;


    start := @parameter0: char;
    end := @parameter1: char;
    $stack2 = new org.apache.commons.lang3.CharRange;
    specialinvoke $stack2.<org.apache.commons.lang3.CharRange: void <init>(char,char,boolean)>(start, end, 1);

    return $stack2;
}
","```java
package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class CharRangeTest {

    private CharRange charRange;

    // Set up for CharRange methods
    @BeforeEach
    void setUp() {
        // No setup needed for this static method, only need an instance when testing non-static methods.
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test creating a CharRange with distinct start and end characters"")
    void testCharRangeDistinctStartEnd() {
        char start = 'a';
        char end = 'z';
        charRange = CharRange.isNotIn(start, end);
        assertNotNull(charRange, ""CharRange should be created successfully with start 'a' and end 'z'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test creating a CharRange with start character greater than end character"")
    void testCharRangeStartGreaterThanEnd() {
        char start = 'z';
        char end = 'a';
        charRange = CharRange.isNotIn(start, end);
        assertNotNull(charRange, ""CharRange should be created successfully with start 'z' and end 'a'"");
    }

    @Test
    @DisplayName(""Test creating a CharRange with start and end as the same character"")
    void testCharRangeSameStartEnd() {
        char start = 'x';
        char end = 'x';
        charRange = CharRange.isNotIn(start, end);
        assertNotNull(charRange, ""CharRange should be created successfully with start and end 'x'"");
    }

    // EDGE CASES (Special Characters)

    @Test
    @DisplayName(""Test creating a CharRange with start and end as special characters"")
    void testCharRangeSpecialCharacters() {
        char start = '\n';
        char end = '\t';
        charRange = CharRange.isNotIn(start, end);
        assertNotNull(charRange, ""CharRange should be created successfully with special characters like newline and tab"");
    }

    @Test
    @DisplayName(""Test creating a CharRange with maximum char values"")
    void testCharRangeMaxCharValues() {
        char start = Character.MAX_VALUE;
        char end = Character.MAX_VALUE;
        charRange = CharRange.isNotIn(start, end);
        assertNotNull(charRange, ""CharRange should be created successfully with Character.MAX_VALUE"");
    }

    @Test
    @DisplayName(""Test creating a CharRange with minimum char values"")
    void testCharRangeMinCharValues() {
        char start = Character.MIN_VALUE;
        char end = Character.MIN_VALUE;
        charRange = CharRange.isNotIn(start, end);
        assertNotNull(charRange, ""CharRange should be created successfully with Character.MIN_VALUE"");
    }
}
```","package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class CharRangeTest {

    private CharRange charRange;

    // Set up for CharRange methods
    @BeforeEach
    void setUp() {
        // No setup needed for this static method, only need an instance when testing non-static methods.
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test creating a CharRange with distinct start and end characters"")
    void testCharRangeDistinctStartEnd() {
        char start = 'a';
        char end = 'z';
        charRange = CharRange.isNotIn(start, end);
        assertNotNull(charRange, ""CharRange should be created successfully with start 'a' and end 'z'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test creating a CharRange with start character greater than end character"")
    void testCharRangeStartGreaterThanEnd() {
        char start = 'z';
        char end = 'a';
        charRange = CharRange.isNotIn(start, end);
        assertNotNull(charRange, ""CharRange should be created successfully with start 'z' and end 'a'"");
    }

    @Test
    @DisplayName(""Test creating a CharRange with start and end as the same character"")
    void testCharRangeSameStartEnd() {
        char start = 'x';
        char end = 'x';
        charRange = CharRange.isNotIn(start, end);
        assertNotNull(charRange, ""CharRange should be created successfully with start and end 'x'"");
    }

    // EDGE CASES (Special Characters)

    @Test
    @DisplayName(""Test creating a CharRange with start and end as special characters"")
    void testCharRangeSpecialCharacters() {
        char start = '\n';
        char end = '\t';
        charRange = CharRange.isNotIn(start, end);
        assertNotNull(charRange, ""CharRange should be created successfully with special characters like newline and tab"");
    }

    @Test
    @DisplayName(""Test creating a CharRange with maximum char values"")
    void testCharRangeMaxCharValues() {
        char start = Character.MAX_VALUE;
        char end = Character.MAX_VALUE;
        charRange = CharRange.isNotIn(start, end);
        assertNotNull(charRange, ""CharRange should be created successfully with Character.MAX_VALUE"");
    }

    @Test
    @DisplayName(""Test creating a CharRange with minimum char values"")
    void testCharRangeMinCharValues() {
        char start = Character.MIN_VALUE;
        char end = Character.MIN_VALUE;
        charRange = CharRange.isNotIn(start, end);
        assertNotNull(charRange, ""CharRange should be created successfully with Character.MIN_VALUE"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
"org.apache.commons.lang3.CharRange.contains(org.apache.commons.lang3.CharRange)","boolean contains(org.apache.commons.lang3.CharRange)","{
    org.apache.commons.lang3.CharRange range, this;
    unknown $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack2, $stack20, $stack21, $stack22, $stack23, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9;


    this := @this: org.apache.commons.lang3.CharRange;
    range := @parameter0: org.apache.commons.lang3.CharRange;

    if range != null goto label01;
    $stack23 = new java.lang.IllegalArgumentException;
    specialinvoke $stack23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(""The Range must not be null"");

    throw $stack23;

  label01:
    $stack2 = this.<org.apache.commons.lang3.CharRange: boolean negated>;

    if $stack2 == 0 goto label08;
    $stack12 = range.<org.apache.commons.lang3.CharRange: boolean negated>;

    if $stack12 == 0 goto label04;
    $stack19 = this.<org.apache.commons.lang3.CharRange: char start>;
    $stack18 = range.<org.apache.commons.lang3.CharRange: char start>;

    if $stack19 < $stack18 goto label02;
    $stack21 = this.<org.apache.commons.lang3.CharRange: char end>;
    $stack20 = range.<org.apache.commons.lang3.CharRange: char end>;

    if $stack21 > $stack20 goto label02;
    $stack22 = 1;

    goto label03;

  label02:
    $stack22 = 0;

  label03:
    return $stack22;

  label04:
    $stack14 = range.<org.apache.commons.lang3.CharRange: char end>;
    $stack13 = this.<org.apache.commons.lang3.CharRange: char start>;

    if $stack14 < $stack13 goto label05;
    $stack16 = range.<org.apache.commons.lang3.CharRange: char start>;
    $stack15 = this.<org.apache.commons.lang3.CharRange: char end>;

    if $stack16 <= $stack15 goto label06;

  label05:
    $stack17 = 1;

    goto label07;

  label06:
    $stack17 = 0;

  label07:
    return $stack17;

  label08:
    $stack3 = range.<org.apache.commons.lang3.CharRange: boolean negated>;

    if $stack3 == 0 goto label11;
    $stack9 = this.<org.apache.commons.lang3.CharRange: char start>;

    if $stack9 != 0 goto label09;
    $stack10 = this.<org.apache.commons.lang3.CharRange: char end>;

    if $stack10 != 65535 goto label09;
    $stack11 = 1;

    goto label10;

  label09:
    $stack11 = 0;

  label10:
    return $stack11;

  label11:
    $stack5 = this.<org.apache.commons.lang3.CharRange: char start>;
    $stack4 = range.<org.apache.commons.lang3.CharRange: char start>;

    if $stack5 > $stack4 goto label12;
    $stack7 = this.<org.apache.commons.lang3.CharRange: char end>;
    $stack6 = range.<org.apache.commons.lang3.CharRange: char end>;

    if $stack7 < $stack6 goto label12;
    $stack8 = 1;

    goto label13;

  label12:
    $stack8 = 0;

  label13:
    return $stack8;
}
","```java
package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange contains method.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class CharRangeTest {

    private CharRange range;

    @BeforeEach
    void setUp() {
        range = new CharRange('a', 'z');
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test contains when both ranges are non-negated and equal"")
    void testContainsNonNegatedEqual() {
        CharRange otherRange = new CharRange('a', 'z');
        assertTrue(range.contains(otherRange), ""Range should contain equal range"");
    }

    @Test
    @DisplayName(""Test contains when both ranges are non-negated and overlap"")
    void testContainsNonNegatedOverlap() {
        CharRange otherRange = new CharRange('m', 'z');
        assertTrue(range.contains(otherRange), ""Range should contain overlapping range"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test contains when other range is null"")
    void testContainsNullRange() {
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
            range.contains(null);
        }, ""Should throw IllegalArgumentException for null range"");

        assertEquals(""The Range must not be null"", exception.getMessage(), ""Exception message should match expected"");
    }

    @Test
    @DisplayName(""Test contains when range is negated and other is not negated"")
    void testContainsNegatedVsNonNegated() {
        range = new CharRange('a', 'z', true);
        CharRange otherRange = new CharRange('a', 'z');
        assertFalse(range.contains(otherRange), ""Negated range should not contain non-negated range"");
    }

    @Test
    @DisplayName(""Test contains when both ranges are negated"")
    void testContainsBothNegated() {
        range = new CharRange('a', 'z', true);
        CharRange otherRange = new CharRange('b', 'y', true);
        assertTrue(range.contains(otherRange), ""Negated range should contain other negated range"");
    }

    // CORNER CASES

    @Test
    @DisplayName(""Test contains when both ranges are non-negated and disjoint"")
    void testContainsNonNegatedDisjoint() {
        CharRange otherRange = new CharRange('A', 'Z');
        assertFalse(range.contains(otherRange), ""Range should not contain disjoint range"");
    }

    @Test
    @DisplayName(""Test contains when negated range spans entire char set"")
    void testContainsFullNegatedRange() {
        range = new CharRange((char) 0, (char) 65535, true);
        CharRange otherRange = new CharRange('b', 'y', true);
        assertTrue(range.contains(otherRange), ""Full negated range should contain any sub-range"");
    }

    @Test
    @DisplayName(""Test contains when other range is completely outside bounds"")
    void testContainsOutsideBounds() {
        CharRange otherRange = new CharRange('0', '9');
        assertFalse(range.contains(otherRange), ""Range should not contain range outside its bounds"");
    }
}
```","package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange contains method.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class CharRangeTest {

    private CharRange range;

    @BeforeEach
    void setUp() {
        range = new CharRange('a', 'z');
    }

    // TYPICAL CASES

    @Test
    @DisplayName(""Test contains when both ranges are non-negated and equal"")
    void testContainsNonNegatedEqual() {
        CharRange otherRange = new CharRange('a', 'z');
        assertTrue(range.contains(otherRange), ""Range should contain equal range"");
    }

    @Test
    @DisplayName(""Test contains when both ranges are non-negated and overlap"")
    void testContainsNonNegatedOverlap() {
        CharRange otherRange = new CharRange('m', 'z');
        assertTrue(range.contains(otherRange), ""Range should contain overlapping range"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test contains when other range is null"")
    void testContainsNullRange() {
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
            range.contains(null);
        }, ""Should throw IllegalArgumentException for null range"");

        assertEquals(""The Range must not be null"", exception.getMessage(), ""Exception message should match expected"");
    }

    @Test
    @DisplayName(""Test contains when range is negated and other is not negated"")
    void testContainsNegatedVsNonNegated() {
        range = new CharRange('a', 'z', true);
        CharRange otherRange = new CharRange('a', 'z');
        assertFalse(range.contains(otherRange), ""Negated range should not contain non-negated range"");
    }

    @Test
    @DisplayName(""Test contains when both ranges are negated"")
    void testContainsBothNegated() {
        range = new CharRange('a', 'z', true);
        CharRange otherRange = new CharRange('b', 'y', true);
        assertTrue(range.contains(otherRange), ""Negated range should contain other negated range"");
    }

    // CORNER CASES

    @Test
    @DisplayName(""Test contains when both ranges are non-negated and disjoint"")
    void testContainsNonNegatedDisjoint() {
        CharRange otherRange = new CharRange('A', 'Z');
        assertFalse(range.contains(otherRange), ""Range should not contain disjoint range"");
    }

    @Test
    @DisplayName(""Test contains when negated range spans entire char set"")
    void testContainsFullNegatedRange() {
        range = new CharRange((char) 0, (char) 65535, true);
        CharRange otherRange = new CharRange('b', 'y', true);
        assertTrue(range.contains(otherRange), ""Full negated range should contain any sub-range"");
    }

    @Test
    @DisplayName(""Test contains when other range is completely outside bounds"")
    void testContainsOutsideBounds() {
        CharRange otherRange = new CharRange('0', '9');
        assertFalse(range.contains(otherRange), ""Range should not contain range outside its bounds"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
"org.apache.commons.lang3.CharRange.isIn(char, char)","org.apache.commons.lang3.CharRange isIn(char, char)","{
    char end, start;
    unknown $stack2;


    start := @parameter0: char;
    end := @parameter1: char;
    $stack2 = new org.apache.commons.lang3.CharRange;
    specialinvoke $stack2.<org.apache.commons.lang3.CharRange: void <init>(char,char,boolean)>(start, end, 0);

    return $stack2;
}
","```java
package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class CharRangeTest {

    private char start;
    private char end;

    // TYPICAL CASES

    @Test
    @DisplayName(""Test char range with typical lowercase letters"")
    void testCharRangeTypicalLowercase() {
        start = 'a';
        end = 'z';
        CharRange charRange = new CharRange(start, end, false);
        assertFalse(charRange.isNegated(), ""CharRange should not be negated"");
        assertEquals(start, charRange.getStart(), ""Start should be 'a'"");
        assertEquals(end, charRange.getEnd(), ""End should be 'z'"");
    }

    @Test
    @DisplayName(""Test char range with typical uppercase letters"")
    void testCharRangeTypicalUppercase() {
        start = 'A';
        end = 'Z';
        CharRange charRange = new CharRange(start, end, false);
        assertFalse(charRange.isNegated(), ""CharRange should not be negated"");
        assertEquals(start, charRange.getStart(), ""Start should be 'A'"");
        assertEquals(end, charRange.getEnd(), ""End should be 'Z'"");
    }

    @Test
    @DisplayName(""Test char range with digits"")
    void testCharRangeDigits() {
        start = '0';
        end = '9';
        CharRange charRange = new CharRange(start, end, false);
        assertFalse(charRange.isNegated(), ""CharRange should not be negated"");
        assertEquals(start, charRange.getStart(), ""Start should be '0'"");
        assertEquals(end, charRange.getEnd(), ""End should be '9'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test char range with start and end as the same character"")
    void testCharRangeSingleCharacter() {
        start = 'a';
        end = 'a';
        CharRange charRange = new CharRange(start, end, false);
        assertFalse(charRange.isNegated(), ""CharRange should not be negated"");
        assertEquals(start, charRange.getStart(), ""Start and end should be 'a'"");
        assertEquals(end, charRange.getEnd(), ""Start and end should be 'a'"");
    }

    @Test
    @DisplayName(""Test char range with maximal character boundary"")
    void testCharRangeMaximalBoundary() {
        start = Character.MIN_VALUE;
        end = Character.MAX_VALUE;
        CharRange charRange = new CharRange(start, end, false);
        assertFalse(charRange.isNegated(), ""CharRange should not be negated"");
        assertEquals(start, charRange.getStart(), ""Start should be Character.MIN_VALUE"");
        assertEquals(end, charRange.getEnd(), ""End should be Character.MAX_VALUE"");
    }

    @Test
    @DisplayName(""Test character range in reverse order"")
    void testCharRangeReverseOrder() {
        start = 'z';
        end = 'a';
        CharRange charRange = new CharRange(start, end, false);
        assertFalse(charRange.isNegated(), ""CharRange should not be negated"");
        assertEquals(start, charRange.getStart(), ""Start should be 'z'"");
        assertEquals(end, charRange.getEnd(), ""End should be 'a'"");
    }

    @Test
    @DisplayName(""Test character range with symbols"")
    void testCharRangeWithSymbols() {
        start = '!';
        end = '/';
        CharRange charRange = new CharRange(start, end, false);
        assertFalse(charRange.isNegated(), ""CharRange should not be negated"");
        assertEquals(start, charRange.getStart(), ""Start should be '!'"");
        assertEquals(end, charRange.getEnd(), ""End should be '/'"");
    }
}
```","package org.apache.commons.lang3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Rigorous JUnit 5 tests for the CharRange class.
 * Covers typical cases, edge cases, corner cases, and error handling.
 */
class CharRangeTest {

    private char start;
    private char end;

    // TYPICAL CASES

    @Test
    @DisplayName(""Test char range with typical lowercase letters"")
    void testCharRangeTypicalLowercase() {
        start = 'a';
        end = 'z';
        CharRange charRange = new CharRange(start, end, false);
        assertFalse(charRange.isNegated(), ""CharRange should not be negated"");
        assertEquals(start, charRange.getStart(), ""Start should be 'a'"");
        assertEquals(end, charRange.getEnd(), ""End should be 'z'"");
    }

    @Test
    @DisplayName(""Test char range with typical uppercase letters"")
    void testCharRangeTypicalUppercase() {
        start = 'A';
        end = 'Z';
        CharRange charRange = new CharRange(start, end, false);
        assertFalse(charRange.isNegated(), ""CharRange should not be negated"");
        assertEquals(start, charRange.getStart(), ""Start should be 'A'"");
        assertEquals(end, charRange.getEnd(), ""End should be 'Z'"");
    }

    @Test
    @DisplayName(""Test char range with digits"")
    void testCharRangeDigits() {
        start = '0';
        end = '9';
        CharRange charRange = new CharRange(start, end, false);
        assertFalse(charRange.isNegated(), ""CharRange should not be negated"");
        assertEquals(start, charRange.getStart(), ""Start should be '0'"");
        assertEquals(end, charRange.getEnd(), ""End should be '9'"");
    }

    // EDGE CASES

    @Test
    @DisplayName(""Test char range with start and end as the same character"")
    void testCharRangeSingleCharacter() {
        start = 'a';
        end = 'a';
        CharRange charRange = new CharRange(start, end, false);
        assertFalse(charRange.isNegated(), ""CharRange should not be negated"");
        assertEquals(start, charRange.getStart(), ""Start and end should be 'a'"");
        assertEquals(end, charRange.getEnd(), ""Start and end should be 'a'"");
    }

    @Test
    @DisplayName(""Test char range with maximal character boundary"")
    void testCharRangeMaximalBoundary() {
        start = Character.MIN_VALUE;
        end = Character.MAX_VALUE;
        CharRange charRange = new CharRange(start, end, false);
        assertFalse(charRange.isNegated(), ""CharRange should not be negated"");
        assertEquals(start, charRange.getStart(), ""Start should be Character.MIN_VALUE"");
        assertEquals(end, charRange.getEnd(), ""End should be Character.MAX_VALUE"");
    }

    @Test
    @DisplayName(""Test character range in reverse order"")
    void testCharRangeReverseOrder() {
        start = 'z';
        end = 'a';
        CharRange charRange = new CharRange(start, end, false);
        assertFalse(charRange.isNegated(), ""CharRange should not be negated"");
        assertEquals(start, charRange.getStart(), ""Start should be 'z'"");
        assertEquals(end, charRange.getEnd(), ""End should be 'a'"");
    }

    @Test
    @DisplayName(""Test character range with symbols"")
    void testCharRangeWithSymbols() {
        start = '!';
        end = '/';
        CharRange charRange = new CharRange(start, end, false);
        assertFalse(charRange.isNegated(), ""CharRange should not be negated"");
        assertEquals(start, charRange.getStart(), ""Start should be '!'"");
        assertEquals(end, charRange.getEnd(), ""End should be '/'"");
    }
}","lang_1_buggy/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
